Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"63dc1d41-cdf4-4101-80c8-0ae4ec6f0b68\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/compiler.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/discord.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/encodings.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/cloud-bridge/cloud-bridge.iml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/cloud-modules/module-npc/module-npc.iml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/cloud-modules/module-perms/module-perms.iml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/cloud-modules/module-signs/module-signs.iml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"$USER_HOME$/scoop/apps/maven/3.8.6\" />\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n    <option name=\"disabledProfiles\">\r\n      <list>\r\n        <option value=\"deploy\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2HXtroUakSzO2uaMg4ccIkUvVR6\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"MavenSettings\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"63dc1d41-cdf4-4101-80c8-0ae4ec6f0b68\" name=\"Changes\" comment=\"\" />\r\n      <created>1668443462392</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1668443462392</updated>\r\n      <workItem from=\"1668443464563\" duration=\"2912000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/.idea/workspace.xml	(date 1668459262896)
@@ -5,22 +5,54 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="63dc1d41-cdf4-4101-80c8-0ae4ec6f0b68" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/discord.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/jarRepositories.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cloud-bridge/cloud-bridge.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cloud-modules/module-npc/module-npc.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cloud-modules/module-perms/module-perms.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cloud-modules/module-signs/module-signs.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/codeStyles/Project.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/codeStyles/codeStyleConfig.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/scala_settings.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-bridge/target/classes/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-bridge/target/classes/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-bridge/target/original-plugin.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-bridge/target/original-plugin.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-bridge/target/plugin.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-bridge/target/plugin.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-discordbot/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-discordbot/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-discordbot/target/classes/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-discordbot/target/classes/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-driver/target/original-driver.jar.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-driver/target/original-driver.jar.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-launcher/src/main/resources/launcher.cloud" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-launcher/src/main/resources/launcher.cloud" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-launcher/target/classes/launcher.cloud" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-launcher/target/classes/launcher.cloud" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-launcher/target/launcher.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-launcher/target/launcher.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-launcher/target/original-launcher.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-launcher/target/original-launcher.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-modules/module-proxy/target/original-module-proxy-SNAPSHOT-1.2.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-modules/module-proxy/target/original-module-proxy-SNAPSHOT-1.2.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/resources/impl/plugin.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/resources/impl/plugin.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/resources/impl/remote.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/resources/impl/remote.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/src/main/resources/node.sc" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/src/main/resources/node.sc" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/CookieCloudCloud-SNAPSHOT-1.5.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/CookieCloudCloud-SNAPSHOT-1.5.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/NodeDriver.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/NodeDriver.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/bootstrap/CloudBootstrap.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/bootstrap/CloudBootstrap.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/commands/impl/PlayerCommand.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/commands/impl/PlayerCommand.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/commands/impl/TaskCommand.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/commands/impl/TaskCommand.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/console/jline3/JLine3Console.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/console/jline3/JLine3Console.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/module/ModuleDownloader.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/module/ModuleDownloader.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/service/helper/NodeServiceQueue.class" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/de/cookiemc/node/service/helper/NodeServiceQueue.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/impl/plugin.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/impl/plugin.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/impl/remote.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/impl/remote.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/classes/node.sc" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/classes/node.sc" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-node/target/original-CookieCloudCloud-SNAPSHOT-1.5.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-node/target/original-CookieCloudCloud-SNAPSHOT-1.5.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cloud-remote/target/original-remote.jar" beforeDir="false" afterPath="$PROJECT_DIR$/cloud-remote/target/original-remote.jar" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="CodeStyleSettingsInfer">
+    <option name="done" value="true" />
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -41,24 +73,64 @@
       </list>
     </option>
   </component>
+  <component name="ProjectCodeStyleSettingsMigration">
+    <option name="version" value="2" />
+  </component>
   <component name="ProjectId" id="2HXtroUakSzO2uaMg4ccIkUvVR6" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "MavenSettings"
-  }
-}]]></component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.project.maven.repository.indices&quot;
+  }
+}</component>
+  <component name="RunManager" selected="Application.CloudBootstrap">
+    <configuration name="BotBootstrap" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="de.cookiemc.discordbot.BotBootstrap" />
+      <module name="cloud-discordbot" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="de.cookiemc.discordbot.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="CloudBootstrap" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="de.cookiemc.node.bootstrap.CloudBootstrap" />
+      <module name="cloud-node" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="de.cookiemc.node.bootstrap.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.CloudBootstrap" />
+        <item itemvalue="Application.BotBootstrap" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="ScalaProjectSettings">
+    <option name="scala3DisclaimerShown" value="true" />
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -67,7 +139,8 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1668443462392</updated>
-      <workItem from="1668443464563" duration="2912000" />
+      <workItem from="1668443464563" duration="9445000" />
+      <workItem from="1668456226799" duration="2387000" />
     </task>
     <servers />
   </component>
Index: cloud-launcher/target/classes/launcher.cloud
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n/*\r\nThis is the CookieCloudCloud launcher config.\r\nUse '#' to make a comment\r\n*/\r\n\r\n#if enabled \"Lystx\" has all permisisons\r\nvar de.cookiemc.launcher.devmode = false\r\n\r\nvar de.cookiemc.launcher.autoupdater = true\r\nvar de.cookiemc.launcher.module.autoupdater = true\r\nvar de.cookiemc.launcher.application.file = https://raw.githubusercontent.com/Lystx/CookieCloudCloud/master/application.json\r\nvar de.cookiemc.launcher.updater.baseUrl = https://github.com/Lystx/CookieCloudCloud/releases/download/v{version}\r\nvar de.cookiemc.launcher.updater.url = {cloud.baseUrl}/CookieCloudCloud-{type}-{version}.zip\r\nvar de.cookiemc.launcher.customVersion = null\r\n\r\n\r\nif ($de.cookiemc.launcher.devmode$) -> {\r\n    log INFO \"DevMode is activated!\"\r\n} else -> {\r\n    log INFO \"DevMode is not activated!\"\r\n}\r\n\r\nrun includeRepositories();\r\nrun includeDependencies();\r\n\r\n\r\n#Including repositories\r\nTask includeRepositories() -> {\r\n    log INFO \"Including Repositories\"\r\n    repo ossrh https://oss.sonatype.org/content/repositories/snapshots\r\n    repo mvn https://repo1.maven.org/maven2\r\n\r\n} : Void\r\n\r\n#Including dependencies\r\nTask includeDependencies() -> {\r\n\r\n    log INFO \"Including Dependencies!\"\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency me.tongfei progressbar 0.5.5\r\n    dependency mysql mysql-connector-java 8.0.27\r\n    dependency org.mongodb mongodb-driver-core 4.2.0-beta1\r\n    dependency org.mongodb mongodb-driver-sync 4.2.0-beta1\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency org.zeroturnaround zt-exec 1.12\r\n    dependency dnsjava dnsjava 3.4.0\r\n    dependency commons-io commons-io 2.11.0\r\n    dependency org.reflections reflections 0.10.2\r\n    dependency com.google.code.gson gson 2.8.9\r\n    dependency com.google.guava guava 31.0.1-jre\r\n    dependency io.netty netty-all 4.1.72.Final\r\n    dependency io.netty netty-transport 4.1.72.Final\r\n    dependency io.netty netty-transport-classes-epoll 4.1.72.Final\r\n    dependency io.netty netty-codec 4.1.72.Final\r\n    dependency org.jline jline 3.20.0\r\n\r\n} : Void\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-launcher/target/classes/launcher.cloud b/cloud-launcher/target/classes/launcher.cloud
--- a/cloud-launcher/target/classes/launcher.cloud	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-launcher/target/classes/launcher.cloud	(date 1668458969650)
@@ -4,7 +4,7 @@
 Use '#' to make a comment
 */
 
-#if enabled "Lystx" has all permisisons
+#if enabled "CookieMC337" has all permisisons
 var de.cookiemc.launcher.devmode = false
 
 var de.cookiemc.launcher.autoupdater = true
Index: cloud-node/src/main/resources/node.sc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n#if enabled \"Lystx\" has all permisisons\r\nvar de.cookiemc.launcher.devmode = false\r\n\r\nif ($de.cookiemc.launcher.devmode$) -> {\r\n    print \"DevMode is activated!\"\r\n} else -> {\r\n    print \"DevMode is not activated!\"\r\n}\r\n\r\n#first including repos because dependencies need a valid repo\r\nrun includeRepositories();\r\n\r\n#then including dependencies\r\nrun includeDependencies();\r\n\r\n\r\n#Including repositories\r\nTask includeRepositories() -> {\r\n    repo ossrh https://oss.sonatype.org/content/repositories/snapshots\r\n    repo mvn https://repo1.maven.org/maven2\r\n\r\n} : Void\r\n\r\n#Including dependencies\r\nTask includeDependencies() -> {\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency me.tongfei progressbar 0.5.5\r\n    dependency mysql mysql-connector-java 8.0.27\r\n    dependency org.mongodb mongodb-driver-core 4.2.0-beta1\r\n    dependency org.mongodb mongodb-driver-sync 4.2.0-beta1\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency org.zeroturnaround zt-exec 1.12\r\n    dependency dnsjava dnsjava 3.4.0\r\n    dependency commons-io commons-io 2.11.0\r\n    dependency org.reflections reflections 0.10.2\r\n    dependency com.google.code.gson gson 2.8.9\r\n    dependency com.google.guava guava 31.0.1-jre\r\n    dependency io.netty netty-all 4.1.72.Final\r\n    dependency io.netty netty-transport 4.1.72.Final\r\n    dependency io.netty netty-transport-classes-epoll 4.1.72.Final\r\n    dependency io.netty netty-codec 4.1.72.Final\r\n    dependency org.jline jline 3.20.0\r\n\r\n} : Void\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/resources/node.sc b/cloud-node/src/main/resources/node.sc
--- a/cloud-node/src/main/resources/node.sc	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/resources/node.sc	(date 1668456181440)
@@ -1,6 +1,6 @@
 
 
-#if enabled "Lystx" has all permisisons
+#if enabled "CookieMC337" has all permisisons
 var de.cookiemc.launcher.devmode = false
 
 if ($de.cookiemc.launcher.devmode$) -> {
Index: cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node.commands.impl;\r\n\r\nimport de.cookiemc.driver.CloudDriver;\r\nimport de.cookiemc.driver.commands.context.CommandContext;\r\nimport de.cookiemc.driver.commands.data.Command;\r\nimport de.cookiemc.driver.commands.data.enums.CommandScope;\r\nimport de.cookiemc.driver.commands.help.CommandHelp;\r\nimport de.cookiemc.driver.commands.help.CommandHelper;\r\nimport de.cookiemc.driver.commands.parameter.CommandArguments;\r\nimport de.cookiemc.driver.commands.tabcomplete.TabCompleter;\r\nimport de.cookiemc.driver.commands.tabcomplete.TabCompletion;\r\nimport de.cookiemc.driver.player.CloudOfflinePlayer;\r\nimport de.cookiemc.driver.player.ICloudPlayer;\r\nimport de.cookiemc.driver.player.ICloudPlayerManager;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n@Command(\r\n        label = \"player\",\r\n        aliases = {\"players\"},\r\n        desc = \"Manages all players\",\r\n        invalidUsageIfEmptyInput = true,\r\n        autoHelpAliases = {\"help\", \"?\"},\r\n        permission = \"cloud.command.player\",\r\n        scope = CommandScope.CONSOLE_AND_INGAME\r\n)\r\npublic class PlayerCommand {\r\n\r\n    @CommandHelp\r\n    public void onArgumentHelp(CommandHelper helper) {\r\n        helper.performTemplateHelp();\r\n    }\r\n\r\n    @TabCompletion\r\n    public void onTabComplete(TabCompleter completer) {\r\n        completer.reactWithSubCommands(\"player\");\r\n    }\r\n\r\n    @Command(\r\n            label = \"list\",\r\n            parent = \"player\",\r\n            desc = \"Lists all online players\",\r\n            scope = CommandScope.CONSOLE_AND_INGAME\r\n    )\r\n    public void listCommand(CommandContext<?> ctx, CommandArguments args) {\r\n\r\n        List<ICloudPlayer> players = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudPlayerManager.class).getAllCachedCloudPlayers();\r\n\r\n        if (players.isEmpty()) {\r\n            ctx.sendMessage(\"§cThere are currently no players online!\");\r\n            return;\r\n        }\r\n\r\n        ctx.sendMessage(\"§8\");\r\n        ctx.sendMessage(\"§7Players (\" + players.size() + \")§8:\");\r\n\r\n        for (ICloudPlayer player : players) {\r\n            ctx.sendMessage(\"§b\" + player.getName() + \" §8[§e\" + player.getProxyServer().getName() + \" | \" + (player.getServer() == null ? \"None\" : player.getServer().getName()) + \"§8]\");\r\n        }\r\n        ctx.sendMessage(\"§8\");\r\n    }\r\n\r\n\r\n    @Command(\r\n            label = \"info\",\r\n            parent = \"player\",\r\n            usage = \"<name>\",\r\n            desc = \"Gives info about a player\",\r\n            scope = CommandScope.CONSOLE_AND_INGAME\r\n    )\r\n    public void infoCommand(CommandContext<?> ctx, CommandArguments args) {\r\n        String name = args.get(0, String.class);\r\n        ICloudPlayerManager playerManager = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudPlayerManager.class);\r\n        CloudOfflinePlayer player = playerManager.getOfflinePlayerByNameBlockingOrNull(name);\r\n\r\n        if (player == null) {\r\n            ctx.sendMessage(\"§cNo such player with the name §e\" + name + \" §chas ever joined the network!\");\r\n            return;\r\n        }\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd.MM.yyyy - HH:mm:ss\");\r\n\r\n        ctx.sendMessage(\"§8\");\r\n        ctx.sendMessage(\"Service information:\");\r\n        ctx.sendMessage(\"§bName: §7\" + player.getName() + \" §8[§3\" + player.getUniqueId() + \"§8]\");\r\n        ctx.sendMessage(\"§bFirst Login: §7\" +  sdf.format(new Date(player.getFirstLogin())));\r\n        ctx.sendMessage(\"§bLast Login: §7\" +  sdf.format(new Date(player.getLastLogin())));\r\n        ctx.sendMessage(\"§bProperties: §7\" +  player.getProperties().asRawJsonString());\r\n        ctx.sendMessage(\"§bStatus: §7\" + (player.isOnline() ? \"§aOnline\" : \"§cOffline\"));\r\n        if (player.isOnline()) {\r\n            ICloudPlayer onlinePlayer = player.asOnlinePlayer();\r\n            ctx.sendMessage(\"§bProxy: §7\" + onlinePlayer.getProxyServer());\r\n            ctx.sendMessage(\"§bServer: §7\" + onlinePlayer.getServer());\r\n\r\n        }\r\n        ctx.sendMessage(\"§8\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java b/cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java
--- a/cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/commands/impl/PlayerCommand.java	(date 1668453370755)
@@ -93,7 +93,6 @@
             ICloudPlayer onlinePlayer = player.asOnlinePlayer();
             ctx.sendMessage("§bProxy: §7" + onlinePlayer.getProxyServer());
             ctx.sendMessage("§bServer: §7" + onlinePlayer.getServer());
-
         }
         ctx.sendMessage("§8");
     }
Index: cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node;\r\n\r\nimport de.cookiemc.IdentifiableClassLoader;\r\nimport de.cookiemc.common.VersionInfo;\r\nimport de.cookiemc.common.collection.NamedThreadFactory;\r\nimport de.cookiemc.common.function.ExceptionallyConsumer;\r\nimport de.cookiemc.common.function.ExceptionallyRunnable;\r\nimport de.cookiemc.common.logging.LogLevel;\r\nimport de.cookiemc.common.logging.Logger;\r\nimport de.cookiemc.common.logging.formatter.ColoredMessageFormatter;\r\nimport de.cookiemc.common.logging.handler.HandledAsyncLogger;\r\nimport de.cookiemc.common.logging.handler.LogEntry;\r\nimport de.cookiemc.common.misc.FileUtils;\r\nimport de.cookiemc.common.misc.StringUtils;\r\nimport de.cookiemc.common.task.Task;\r\nimport de.cookiemc.common.util.Validation;\r\nimport de.cookiemc.driver.CloudDriver;\r\nimport de.cookiemc.driver.DriverEnvironment;\r\nimport de.cookiemc.driver.commands.ICommandManager;\r\nimport de.cookiemc.driver.commands.parameter.defaults.NodeParamType;\r\nimport de.cookiemc.driver.commands.parameter.defaults.PlayerParamType;\r\nimport de.cookiemc.driver.commands.parameter.defaults.ServiceParamType;\r\nimport de.cookiemc.driver.commands.parameter.defaults.TaskParamType;\r\nimport de.cookiemc.driver.commands.sender.ConsoleCommandSender;\r\nimport de.cookiemc.driver.commands.sender.defaults.DefaultCommandSender;\r\nimport de.cookiemc.driver.console.Console;\r\nimport de.cookiemc.driver.console.screen.Screen;\r\nimport de.cookiemc.driver.console.screen.ScreenManager;\r\nimport de.cookiemc.driver.database.IDatabaseManager;\r\nimport de.cookiemc.driver.database.SectionedDatabase;\r\nimport de.cookiemc.driver.event.IEventManager;\r\nimport de.cookiemc.driver.event.defaults.driver.DriverLogEvent;\r\nimport de.cookiemc.http.api.HttpServer;\r\nimport de.cookiemc.http.impl.NettyHttpServer;\r\nimport de.cookiemc.driver.message.IChannelMessenger;\r\nimport de.cookiemc.driver.module.IModuleManager;\r\nimport de.cookiemc.driver.networking.NetworkComponent;\r\nimport de.cookiemc.driver.networking.PacketProvider;\r\nimport de.cookiemc.http.ProtocolAddress;\r\nimport de.cookiemc.driver.networking.protocol.codec.buf.IBufferObject;\r\nimport de.cookiemc.driver.networking.protocol.packets.defaults.DriverLoggingPacket;\r\nimport de.cookiemc.driver.networking.protocol.packets.defaults.DriverUpdatePacket;\r\nimport de.cookiemc.driver.node.INode;\r\nimport de.cookiemc.driver.node.INodeManager;\r\nimport de.cookiemc.driver.node.config.DefaultNodeConfig;\r\nimport de.cookiemc.driver.node.packet.NodeCycleDataPacket;\r\nimport de.cookiemc.driver.permission.PermissionChecker;\r\nimport de.cookiemc.driver.player.ICloudPlayerManager;\r\nimport de.cookiemc.driver.player.executor.PlayerExecutor;\r\nimport de.cookiemc.driver.player.impl.DefaultCloudOfflinePlayer;\r\nimport de.cookiemc.driver.services.ICloudServer;\r\nimport de.cookiemc.driver.services.ICloudServiceManager;\r\nimport de.cookiemc.driver.services.IProcessCloudServer;\r\nimport de.cookiemc.driver.services.fallback.SimpleFallback;\r\nimport de.cookiemc.driver.services.task.ICloudServiceTaskManager;\r\nimport de.cookiemc.driver.services.task.IServiceTask;\r\nimport de.cookiemc.driver.services.task.UniversalServiceTask;\r\nimport de.cookiemc.driver.services.task.bundle.DefaultTaskGroup;\r\nimport de.cookiemc.driver.services.task.bundle.ITaskGroup;\r\nimport de.cookiemc.driver.services.template.ITemplate;\r\nimport de.cookiemc.driver.services.template.ITemplateManager;\r\nimport de.cookiemc.driver.services.template.ITemplateStorage;\r\nimport de.cookiemc.driver.services.template.def.CloudTemplate;\r\nimport de.cookiemc.driver.services.utils.ServiceShutdownBehaviour;\r\nimport de.cookiemc.driver.services.utils.SpecificDriverEnvironment;\r\nimport de.cookiemc.driver.services.utils.version.ServiceVersion;\r\nimport de.cookiemc.driver.setup.SetupControlState;\r\nimport de.cookiemc.driver.storage.INetworkDocumentStorage;\r\nimport de.cookiemc.driver.sync.ISyncedNetworkPromise;\r\nimport de.cookiemc.driver.sync.SyncedObjectType;\r\nimport de.cookiemc.driver.uuid.IdentificationCache;\r\nimport de.cookiemc.node.cache.NodeIdentificationCache;\r\nimport de.cookiemc.node.cache.NodeSyncedNetworkPromise;\r\nimport de.cookiemc.node.commands.impl.*;\r\nimport de.cookiemc.node.console.ConsoleCommandEventAdapter;\r\nimport de.cookiemc.node.console.NodeCommandCompleter;\r\nimport de.cookiemc.node.console.NodeCommandInputHandler;\r\nimport de.cookiemc.node.console.NodeScreenManager;\r\nimport de.cookiemc.node.console.log4j.EmptyAppenderSkeleton;\r\nimport de.cookiemc.node.commands.NodeCommandManager;\r\nimport de.cookiemc.node.commands.impl.*;\r\nimport de.cookiemc.node.config.ConfigManager;\r\nimport de.cookiemc.node.config.MainConfiguration;\r\nimport de.cookiemc.node.config.NodeNetworkDocumentStorage;\r\nimport de.cookiemc.node.database.config.DatabaseConfiguration;\r\nimport de.cookiemc.node.database.config.DatabaseType;\r\nimport de.cookiemc.node.database.DefaultDatabaseManager;\r\nimport de.cookiemc.node.handler.http.V1PingRouter;\r\nimport de.cookiemc.node.handler.http.V1StatusRouter;\r\nimport de.cookiemc.node.handler.packet.normal.*;\r\nimport de.cookiemc.node.handler.packet.remote.*;\r\nimport de.cookiemc.node.handler.packet.normal.*;\r\nimport de.cookiemc.node.handler.packet.remote.*;\r\nimport de.cookiemc.node.message.NodeChannelMessenger;\r\nimport de.cookiemc.node.module.NodeModuleManager;\r\nimport de.cookiemc.node.node.BaseNode;\r\nimport de.cookiemc.node.node.NodeBasedClusterExecutor;\r\nimport de.cookiemc.node.node.NodeNodeManager;\r\nimport de.cookiemc.node.player.NodePlayerManager;\r\nimport de.cookiemc.node.setup.NodeRemoteSetup;\r\nimport de.cookiemc.node.setup.NodeSetup;\r\nimport de.cookiemc.node.setup.database.MongoDBSetup;\r\nimport de.cookiemc.node.setup.database.MySqlSetup;\r\nimport de.cookiemc.node.service.NodeServiceManager;\r\nimport de.cookiemc.node.service.NodeServiceTaskManager;\r\nimport de.cookiemc.node.service.helper.NodeServiceQueue;\r\nimport de.cookiemc.node.service.template.LocalTemplateStorage;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@Getter\r\n@Setter\r\npublic class NodeDriver extends CloudDriver<INode> {\r\n\r\n    public static final File NODE_FOLDER = new File(\"cloud/\");\r\n    public static final File CONFIG_FILE = new File(NODE_FOLDER, \"config.json\");\r\n    public static final File LOG_FOLDER = new File(NODE_FOLDER, \"logs/\");\r\n    public static File MODULE_FOLDER;\r\n\r\n    public static final File STORAGE_FOLDER = new File(NODE_FOLDER, \"storage/\");\r\n    public static final File STORAGE_VERSIONS_FOLDER = new File(STORAGE_FOLDER, \"versions/\");\r\n    public static final File STORAGE_TEMP_FOLDER = new File(STORAGE_FOLDER, \"tmp-\" + UUID.randomUUID().toString().substring(0, 5) + \"/\");\r\n    public static final File TEMPLATES_DIR = new File(STORAGE_FOLDER, \"templates/\");\r\n\r\n    public static final File SERVICE_DIR = new File(NODE_FOLDER, \"services/\");\r\n    public static final File SERVICE_DIR_STATIC = new File(SERVICE_DIR, \"permanent/\");\r\n    public static final File SERVICE_DIR_DYNAMIC = new File(SERVICE_DIR, \"temporary/\");\r\n\r\n    /**\r\n     * The static instance to override the cloud instance\r\n     */\r\n    @Getter\r\n    private static NodeDriver instance;\r\n\r\n    /**\r\n     * The current configManager to read\r\n     * and save the node config containing\r\n     * important data for this Driver-Instance\r\n     */\r\n    private ConfigManager configManager;\r\n\r\n    /**\r\n     * The console instance to implement the\r\n     * ScreenSystem and listen for command-input\r\n     * Very complex system. Do not touch anything\r\n     * because it is highly interconnected with the\r\n     * Logging-System and if one method is not used the right\r\n     * way the whole console-system might not work anymore\r\n     */\r\n    private Console console;\r\n\r\n    /**\r\n     * The current commandManager to work with the\r\n     * provided console-system and logging-system\r\n     */\r\n    private ConsoleCommandSender commandSender;\r\n\r\n    /**\r\n     * The java executor service to schedule updating tasks etc.\r\n     */\r\n    private final ScheduledExecutorService scheduledExecutor;\r\n\r\n    /**\r\n     * The node-object that belongs to this NodeDriver-Instance\r\n     */\r\n    private INode node;\r\n\r\n    /**\r\n     * The WebServer for our built-in Rest-API\r\n     */\r\n    private HttpServer webServer;\r\n\r\n    /**\r\n     * The cluster executor to manage the cluster\r\n     * and accept new connections\r\n     */\r\n    private NodeBasedClusterExecutor networkExecutor;\r\n\r\n    /**\r\n     * The service queue to provide all groups & tasks\r\n     * with enough services of their kind\r\n     */\r\n    private NodeServiceQueue serviceQueue;\r\n\r\n\r\n    public NodeDriver(Logger logger, Console console, boolean devMode, String modulePath) throws Exception {\r\n        super(logger, DriverEnvironment.NODE);\r\n        instance = this;\r\n\r\n        this.scheduledExecutor = Executors.newScheduledThreadPool(4, new NamedThreadFactory(\"Scheduler\"));\r\n        this.running = false;\r\n\r\n        ((HandledAsyncLogger) logger).addHandler(entry -> this.getProviderRegistry().getUnchecked(IEventManager.class).callEventGlobally(new DriverLogEvent(entry)));\r\n\r\n        this.console = console;\r\n\r\n        MODULE_FOLDER = new File(modulePath);\r\n        //setting node screen manager\r\n        this.providerRegistry.setProvider(ScreenManager.class, new NodeScreenManager());\r\n        this.providerRegistry.setProvider(ICommandManager.class, new NodeCommandManager());\r\n\r\n        logger.info(\"Configured ScreenManager & CommandManager!\");\r\n\r\n        ICommandManager commandManager = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICommandManager.class);\r\n        commandManager.registerCommands(console);\r\n        commandManager.registerEventAdapter(new ConsoleCommandEventAdapter());\r\n\r\n        ScreenManager screenManager = this.providerRegistry.getUnchecked(ScreenManager.class);\r\n        Screen screen = screenManager.registerScreen(\"console\", true);\r\n\r\n        //registering screen values\r\n        screen.registerInputHandler(new NodeCommandInputHandler());\r\n        screen.registerTabCompleter(new NodeCommandCompleter());\r\n        screen.join();\r\n\r\n        if (!(Thread.currentThread().getContextClassLoader() instanceof IdentifiableClassLoader)) {\r\n            System.out.println(\"Changed ClassLoader\");\r\n            Thread.currentThread().setContextClassLoader(new IdentifiableClassLoader(new URL[]{CloudDriver.class.getProtectionDomain().getCodeSource().getLocation().toURI().toURL()}));\r\n        }\r\n        System.out.println(Thread.currentThread().getContextClassLoader().getClass());\r\n\r\n        Task.runAsync(() -> {\r\n            if (running) {\r\n                return;\r\n            }\r\n            screen.clear();\r\n            this.running = true;\r\n\r\n            //loading config\r\n            this.configManager = new ConfigManager();\r\n            try {\r\n                this.configManager.read();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            this.logger.setMinLevel(this.configManager.getConfig().getLogLevel());\r\n            this.logger.debug(\"Set LogLevel to {}\", this.logger.getMinLevel().getName());\r\n\r\n            this.commandSender = new DefaultCommandSender(\r\n                    this.configManager.getConfig().getNodeConfig().getNodeName(),\r\n                    this.console\r\n            ).forceFunction((ExceptionallyConsumer<String>) s -> console.forceWrite(ColoredMessageFormatter.format(LogEntry.forMessage(LogLevel.INFO, s))));\r\n\r\n            //storage managing\r\n            this.providerRegistry.setProvider(INetworkDocumentStorage.class, new NodeNetworkDocumentStorage());\r\n            this.providerRegistry.getUnchecked(INetworkDocumentStorage.class).fetch();\r\n\r\n            //checking if setup required\r\n            if (!this.configManager.isDidExist()) {\r\n                this.startSetup();\r\n                return;\r\n            } else {\r\n                this.logger.trace(\"Setup already done ==> Skipping...\");\r\n            }\r\n\r\n            //activating entering commands\r\n            this.providerRegistry.getUnchecked(ICommandManager.class).setActive(true);\r\n\r\n            if (devMode) {\r\n                this.logger.debug(\"DevMode is activated!\");\r\n                //in dev mode player \"Lystx\" has every permission\r\n                this.providerRegistry.setProvider(PermissionChecker.class, (playerUniqueId, permission) -> playerUniqueId.toString().equalsIgnoreCase(\"82e8f5a2-4077-407b-af8b-e8325cad7191\"));\r\n            }\r\n\r\n            //avoid log4j errors\r\n            org.apache.log4j.BasicConfigurator.configure(new EmptyAppenderSkeleton());\r\n\r\n            logger.info(\"Configured 'org.apache.log4j.BasicConfigurator'!\");\r\n\r\n            //print header and start node-cluster\r\n            this.console.printHeader();\r\n            this.node = new BaseNode(configManager);\r\n\r\n            //starting web-server\r\n            this.webServer = new NettyHttpServer();\r\n            this.logger.info(\"Setting up HttpListeners...\");\r\n            for (ProtocolAddress address : configManager.getConfig().getHttpListeners()) {\r\n                this.webServer.addListener(address.toHttp());\r\n            }\r\n\r\n            //registering default web api handlers\r\n            this.webServer.getHandlerRegistry().registerHandlers(\"v1\", new V1PingRouter(), new V1StatusRouter());\r\n\r\n            this.logger.info(\"Setting up NetworkListeners...\");\r\n            this.networkExecutor = new NodeBasedClusterExecutor(this.configManager.getConfig());\r\n\r\n            //managing database\r\n            this.providerRegistry.setProvider(\r\n                    IDatabaseManager.class,\r\n                    new DefaultDatabaseManager(\r\n                            MainConfiguration.getInstance().getDatabaseConfiguration().getType(),\r\n                            MainConfiguration.getInstance().getDatabaseConfiguration()\r\n                    )\r\n            );\r\n\r\n            IDatabaseManager databaseManager = this.providerRegistry.getUnchecked(IDatabaseManager.class);\r\n\r\n            {\r\n                SectionedDatabase db = databaseManager.getDatabase();\r\n                db.registerSection(\"players\", DefaultCloudOfflinePlayer.class);\r\n                db.registerSection(\"tasks\", UniversalServiceTask.class);\r\n                db.registerSection(\"groups\", DefaultTaskGroup.class);\r\n\r\n                this.providerRegistry.setProvider(ICloudServiceTaskManager.class, new NodeServiceTaskManager());\r\n                this.providerRegistry.setProvider(ICloudServiceManager.class, new NodeServiceManager());\r\n                this.providerRegistry.setProvider(ICloudPlayerManager.class, new NodePlayerManager());\r\n                this.providerRegistry.setProvider(IChannelMessenger.class, new NodeChannelMessenger());\r\n                this.providerRegistry.setProvider(IModuleManager.class, new NodeModuleManager());\r\n                this.providerRegistry.setProvider(INodeManager.class, new NodeNodeManager());\r\n                this.logger.info(\"§8\");\r\n\r\n                if (node.getConfig().getClusterAddresses() != null && node.getConfig().getClusterAddresses().length > 0) {\r\n                    node.getConfig().setRemote();\r\n                }\r\n\r\n                if (this.node.getConfig().isRemote()) {\r\n                    this.networkExecutor.connectToAllOtherNodes(node.getName(), node.getConfig().getClusterAddresses()).syncUninterruptedly(); //wait till complete\r\n                } else {\r\n                    this.logger.info(\"§7This Node is a HeadNode §7and boots up the Cluster...\");\r\n                }\r\n\r\n                this.providerRegistry.setProvider(IdentificationCache.class, new NodeIdentificationCache()).onTaskSucess(cache -> {\r\n                    cache.setEnabled(MainConfiguration.getInstance().isUniqueIdCaching());\r\n                    cache.loadAsync()\r\n                            .onTaskSucess(uuids -> {\r\n                                logger.info(\"Loaded {} UUIDs from cache!\", uuids.size());\r\n                            });\r\n                });\r\n\r\n\r\n                //creating needed files\r\n                this.logger.trace(\"Creating needed folders...\");\r\n                NodeDriver.NODE_FOLDER.mkdirs();\r\n\r\n                NodeDriver.STORAGE_FOLDER.mkdirs();\r\n                NodeDriver.STORAGE_VERSIONS_FOLDER.mkdirs();\r\n\r\n                NodeDriver.SERVICE_DIR.mkdirs();\r\n                NodeDriver.SERVICE_DIR_STATIC.mkdirs();\r\n                NodeDriver.SERVICE_DIR_DYNAMIC.mkdirs();\r\n                this.logger.trace(\"Required folders created!\");\r\n\r\n\r\n                //checking if directories got deleted meanwhile\r\n                for (ITaskGroup parent : this.providerRegistry.getUnchecked(ICloudServiceTaskManager.class).getAllCachedTaskGroups()) {\r\n\r\n                    //creating templates\r\n                    for (ITemplate template : parent.getTemplates()) {\r\n                        ITemplateStorage storage = template.getStorage();\r\n                        if (storage != null) {\r\n                            storage.createTemplate(template);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                FileUtils.setTempDirectory(Paths.get(\".temp\"));\r\n\r\n                //registering template storage\r\n                this.providerRegistry.getUnchecked(ITemplateManager.class).registerStorage(new LocalTemplateStorage());\r\n\r\n                //copying files\r\n                this.logger.trace(\"§7Copying files§8...\");\r\n                try {\r\n                    FileUtils.copyResource(\"/impl/remote.jar\", STORAGE_VERSIONS_FOLDER + \"/remote.jar\", getClass());\r\n                    FileUtils.copyResource(\"/impl/plugin.jar\", STORAGE_VERSIONS_FOLDER + \"/plugin.jar\", getClass());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                this.logger.trace(\"Registering Commands & ArgumentParsers...\");\r\n\r\n                this.providerRegistry\r\n                        .getUnchecked(ICommandManager.class)\r\n                        .getParamTypeRegistry()\r\n                        .register(\r\n                                new PlayerParamType(),\r\n                                new TaskParamType(),\r\n                                new ServiceParamType(),\r\n                                new NodeParamType()\r\n                        );\r\n\r\n                this.providerRegistry\r\n                        .getUnchecked(ICommandManager.class)\r\n                        .registerCommandsSeperately(\r\n                                new ClearCommand(),\r\n                                new ShutdownCommand(),\r\n                                new LoggerCommand(),\r\n                                new ServiceCommand(),\r\n                                new TickCommand(),\r\n                                new PlayerCommand(),\r\n                                new ClusterCommand(),\r\n                                new NodeCommand(),\r\n                                new TaskCommand(),\r\n                                new ModuleCommand()\r\n                        );\r\n\r\n                this.logger.trace(\"§8\");\r\n\r\n                this.providerRegistry.getUnchecked(INetworkDocumentStorage.class).set(\"cloud::messages\", this.configManager.getConfig().getMessages());\r\n                this.providerRegistry.getUnchecked(INetworkDocumentStorage.class).update();\r\n\r\n                //registering packet handlers\r\n                this.logger.trace(\"Registering Packets & Handlers...\");\r\n                this.networkExecutor.registerPacketHandler(new NodeRedirectPacketHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeDataCycleHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeOfflinePlayerPacketHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeModulePacketHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeModuleControllerPacketHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeStoragePacketHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeLoggingPacketHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeServiceShutdownHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodePlayerCommandHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeServiceConfigureHandler());\r\n                this.networkExecutor.registerPacketHandler(new NodeSyncPacketHandler());\r\n\r\n                //remote packet handlers\r\n                this.networkExecutor.registerUniversalHandler(new NodeRemoteShutdownHandler());\r\n                this.networkExecutor.registerUniversalHandler(new NodeRemoteServerStartHandler());\r\n                this.networkExecutor.registerUniversalHandler(new NodeRemoteServerStopHandler());\r\n                this.networkExecutor.registerUniversalHandler(new NodeRemoteLoggingHandler());\r\n                this.networkExecutor.registerRemoteHandler(new NodeRemoteCacheHandler());\r\n\r\n                this.logger.trace(\"Registered \" + PacketProvider.getRegisteredPackets().size() + \" Packets & \" + this.networkExecutor.getRegisteredPacketHandlers().size() + \" PacketHandlers.\");\r\n                this.logger.trace(\"§8\");\r\n\r\n                //heart-beat execution for time out checking\r\n                TimeOutChecker check = new TimeOutChecker();\r\n                scheduledExecutor.scheduleAtFixedRate(check, 1, 1, TimeUnit.SECONDS);\r\n\r\n\r\n                logger.info(\"§8\");\r\n                //managing and loading modules\r\n                IModuleManager moduleManager = providerRegistry.getUnchecked(IModuleManager.class);\r\n                moduleManager.setModulesDirectory(MODULE_FOLDER.toPath());\r\n                moduleManager.resolveModules();\r\n                logger.info(\"§8\");\r\n                moduleManager.loadModules();\r\n                logger.info(\"§8\");\r\n                moduleManager.enableModules();\r\n                logger.info(\"§8\");\r\n\r\n                // print finish successfully message\r\n                this.logger.info(\"§8\");\r\n                this.logger.info(\"§8\");\r\n                this.logger.info(\"§8\");\r\n                this.logger.info(\"This Node has successfully booted up and is now ready for personal use!\");\r\n                this.logger.info(\"=> Thanks for using CookieCloudCloud [Version: \" + VersionInfo.getCurrentVersion() + \"]\");\r\n                this.logger.info(\"§8\");\r\n                this.logger.info(\"§8\");\r\n                this.logger.info(\"§8\");\r\n\r\n                //starting service queue\r\n                this.serviceQueue = new NodeServiceQueue();\r\n\r\n                //add node cycle data\r\n                scheduledExecutor.scheduleAtFixedRate(this::updateThisSidesClusterParticipant, 1_000, NODE_PUBLISH_INTERVAL, TimeUnit.MILLISECONDS);\r\n                scheduledExecutor.scheduleAtFixedRate(() -> this.networkExecutor.getClient(\"Application\").ifPresent(DriverUpdatePacket::publishUpdate), 1_000, 1, TimeUnit.SECONDS);\r\n\r\n                // add a shutdown hook for fast closes\r\n                Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));\r\n            }\r\n        });\r\n    }\r\n\r\n    private void startSetup() {\r\n        new NodeSetup().start((setup, setupControlState) -> {\r\n\r\n            if (setupControlState != SetupControlState.FINISHED) return;\r\n            switch (setup.getDatabaseType()) {\r\n                case FILE:\r\n                    initConfigs(setup, null, null);\r\n                    break;\r\n                case MYSQL:\r\n                    new MySqlSetup(NodeDriver.getInstance().getConsole()).start((mySqlSetup, setupControlState1) -> {\r\n                        if (setupControlState1 != SetupControlState.FINISHED) return;\r\n                        initConfigs(setup, mySqlSetup, null);\r\n                    });\r\n                    break;\r\n                case MONGODB:\r\n                    new MongoDBSetup(NodeDriver.getInstance().getConsole()).start((mongoDBSetup, setupControlState1) -> {\r\n                        if (setupControlState1 != SetupControlState.FINISHED) return;\r\n                        initConfigs(setup, null, mongoDBSetup);\r\n                    });\r\n                    break;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void logToExecutor(NetworkComponent component, String message, Object... args) {\r\n        message = StringUtils.formatMessage(message, args);\r\n        if (component.matches(this.node)) {\r\n            this.logger.info(message, args);\r\n            return;\r\n        }\r\n        DriverLoggingPacket packet = new DriverLoggingPacket(component, message);\r\n        this.networkExecutor.sendPacketToAll(packet);\r\n    }\r\n\r\n    @Override\r\n    public @NotNull INode thisSidesClusterParticipant() {\r\n        return this.node;\r\n    }\r\n\r\n\r\n    private void initConfigs(NodeSetup setup, MySqlSetup mySqlSetup, MongoDBSetup mongoDBSetup) throws IOException {\r\n        MainConfiguration config = configManager.getConfig();\r\n        DatabaseConfiguration databaseConfiguration = config.getDatabaseConfiguration();\r\n        DefaultNodeConfig nodeConfig = config.getNodeConfig();\r\n\r\n        String nodeName = setup.getName();\r\n        String host = setup.getHost();\r\n        int port = setup.getPort();\r\n        boolean remote = setup.isRemote();\r\n\r\n        ExceptionallyRunnable finish = () -> {\r\n\r\n            nodeConfig.setNodeName(nodeName);\r\n            nodeConfig.setAddress(new ProtocolAddress(host, port));\r\n            nodeConfig.setMemory(setup.getMemory());\r\n            nodeConfig.setRemote(false);\r\n\r\n            config.setNodeConfig(nodeConfig);\r\n\r\n            DatabaseType databaseType = setup.getDatabaseType();\r\n            String databaseHost = \"127.0.0.1\";\r\n            int databasePort = 3306;\r\n            String databaseUser = null;\r\n            String databasePassword = \"local\";\r\n            String databaseName = null;\r\n            String authDatabase = null;\r\n            switch (databaseType) {\r\n                case FILE:\r\n                    databaseHost = \"127.0.0.1\";\r\n                    databasePort = 4518;\r\n                    databaseName = \"cloud\";\r\n                    break;\r\n                case MYSQL:\r\n                    databaseHost = mySqlSetup.getDatabaseHost();\r\n                    databasePort = mySqlSetup.getDatabasePort();\r\n                    databaseUser = mySqlSetup.getDatabaseUser();\r\n                    databasePassword = mySqlSetup.getDatabasePassword();\r\n                    databaseName = mySqlSetup.getDatabaseName();\r\n                    authDatabase = \"\";\r\n                    break;\r\n                case MONGODB:\r\n                    databaseHost = mongoDBSetup.getDatabaseHost();\r\n                    databasePort = mongoDBSetup.getDatabasePort();\r\n                    databaseUser = mongoDBSetup.getDatabaseUser();\r\n                    databasePassword = mongoDBSetup.getDatabasePassword();\r\n                    databaseName = mongoDBSetup.getDatabaseName();\r\n                    authDatabase = mongoDBSetup.getAuthDatabase();\r\n                    break;\r\n            }\r\n\r\n            databaseConfiguration.setHost(databaseHost);\r\n            databaseConfiguration.setPort(databasePort);\r\n            databaseConfiguration.setUser(databaseUser);\r\n            databaseConfiguration.setPassword(databasePassword);\r\n            databaseConfiguration.setDatabase(databaseName);\r\n            databaseConfiguration.setAuthDatabase(authDatabase);\r\n            databaseConfiguration.setType(databaseType);\r\n            config.setDatabaseConfiguration(databaseConfiguration);\r\n\r\n            configManager.setConfig(config);\r\n            configManager.save();\r\n\r\n            if (setup.isDefaultTasks()) {\r\n\r\n                String[] args = new String[]{\r\n                        \"-XX:+UseG1GC\",\r\n                        \"-XX:+ParallelRefProcEnabled\",\r\n                        \"-XX:MaxGCPauseMillis=200\",\r\n                        \"-XX:+UnlockExperimentalVMOptions\",\r\n                        \"-XX:+DisableExplicitGC\",\r\n                        \"-XX:+AlwaysPreTouch\",\r\n                        \"-XX:G1NewSizePercent=30\",\r\n                        \"-XX:G1MaxNewSizePercent=40\",\r\n                        \"-XX:G1HeapRegionSize=8M\",\r\n                        \"-XX:G1ReservePercent=20\",\r\n                        \"-XX:G1HeapWastePercent=5\",\r\n                        \"-XX:G1MixedGCCountTarget=4\",\r\n                        \"-XX:InitiatingHeapOccupancyPercent=15\",\r\n                        \"-XX:G1MixedGCLiveThresholdPercent=90\",\r\n                        \"-XX:G1RSetUpdatingPauseTimePercent=5\",\r\n                        \"-XX:SurvivorRatio=32\",\r\n                        \"-XX:+PerfDisableSharedMem\",\r\n                        \"-XX:MaxTenuringThreshold=1\",\r\n                        \"-Dusing.aikars.flags=https://mcflags.emc.gs\",\r\n                        \"-Daikars.new.flags=true\",\r\n                        \"-XX:-UseAdaptiveSizePolicy\",\r\n                        \"-XX:CompileThreshold=100\",\r\n                        \"-Dio.netty.recycler.maxCapacity=0\",\r\n                        \"-Dio.netty.recycler.maxCapacity.default=0\",\r\n                        \"-Djline.terminal=jline.UnsupportedTerminal\"\r\n                };\r\n\r\n                this.providerRegistry.setProvider(IDatabaseManager.class, new DefaultDatabaseManager(databaseType, new DatabaseConfiguration(databaseType, databaseHost, databasePort, databaseName, authDatabase, databaseUser, databasePassword))).ifPresent(databaseManager -> {\r\n\r\n                    SectionedDatabase database = databaseManager.getDatabase();\r\n                    database.registerSection(\"tasks\", UniversalServiceTask.class);\r\n                    database.registerSection(\"groups\", DefaultTaskGroup.class);\r\n\r\n\r\n                    NodeServiceTaskManager taskManager = new NodeServiceTaskManager();\r\n\r\n                    DefaultTaskGroup proxyGroup = new DefaultTaskGroup(\"Proxy\", SpecificDriverEnvironment.PROXY, ServiceShutdownBehaviour.DELETE, args, new ArrayList<>(), Collections.singleton(new CloudTemplate(\"Proxy\", \"default\", \"local\", true)));\r\n                    DefaultTaskGroup lobbyGroup = new DefaultTaskGroup(\"Lobby\", SpecificDriverEnvironment.MINECRAFT, ServiceShutdownBehaviour.DELETE, args, new ArrayList<>(), Collections.singleton(new CloudTemplate(\"Lobby\", \"default\", \"local\", true)));\r\n\r\n                    IServiceTask proxyTask = new UniversalServiceTask(\"Proxy\", proxyGroup.getName(), Collections.singletonList(config.getNodeConfig().getNodeName()), \"Default CookieCloudCloud Service\", \"\", 1024, 250, 1, -1, 0, true, -1, new SimpleFallback(false, \"\", 0), ServiceVersion.BUNGEECORD, new ArrayList<>());\r\n                    IServiceTask lobbyTask = new UniversalServiceTask(\"Lobby\", lobbyGroup.getName(), Collections.singletonList(config.getNodeConfig().getNodeName()), \"Default CookieCloudCloud Service\", \"\", 512, 50, 1, -1, 1, true, -1, new SimpleFallback(true, \"\", 1), ServiceVersion.SPIGOT_1_8_8, new ArrayList<>());\r\n                    lobbyTask.setProperty(\"gameServer\", true);\r\n\r\n                    proxyTask.setProperty(\"onlineMode\", true);\r\n                    proxyTask.setProperty(\"proxyProtocol\", false);\r\n\r\n                    taskManager.registerTaskGroup(proxyGroup);\r\n                    taskManager.registerTaskGroup(lobbyGroup);\r\n\r\n                    taskManager.registerTask(lobbyTask);\r\n                    taskManager.registerTask(proxyTask);\r\n\r\n                    this.logger.info(\"Created default Proxy & Lobby ServiceTasks!\");\r\n                    this.logger.info(\"§7You §acompleted §7the NodeSetup§8!\");\r\n                    this.logger.info(\"Please reboot the Node now to apply all changes!\");\r\n                    System.exit(0);\r\n                });\r\n                return;\r\n            }\r\n\r\n            this.logger.info(\"§7You §acompleted §7the NodeSetup§8!\");\r\n            this.logger.info(\"Please reboot the Node now to apply all changes!\");\r\n            System.exit(0);\r\n        };\r\n\r\n        if (remote) {\r\n            config.setHttpListeners(new ProtocolAddress[0]);\r\n            new NodeRemoteSetup(NodeDriver.getInstance().getConsole()).start((setup1, state) -> {\r\n                if (state == SetupControlState.FINISHED) {\r\n                    String host1 = setup1.getHost();\r\n                    int port1 = setup1.getPort();\r\n                    String authKey = setup1.getAuthKey();\r\n\r\n                    nodeConfig.setAuthKey(authKey);\r\n                    nodeConfig.setClusterAddresses(new ProtocolAddress[]{new ProtocolAddress(host1, port1, authKey)});\r\n                    finish.run();\r\n                }\r\n            });\r\n        } else {\r\n            finish.run();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Migrates from the Node with the provided name to this node\r\n     * and transfers all the data from the old node to this node instance\r\n     *\r\n     * @param disconnectedNodeName the name of the old head node that left\r\n     */\r\n    public void markAsHeadNode(String disconnectedNodeName) {\r\n        this.node.getConfig().setRemote(); //making this node head node\r\n\r\n        this.updateThisSidesClusterParticipant();\r\n    }\r\n\r\n    @Override\r\n    public void updateThisSidesClusterParticipant() {\r\n        this.networkExecutor.sendPacketToAll(\r\n                new NodeCycleDataPacket(\r\n                        this.node.getConfig().getNodeName(),\r\n                        this.node.getLastCycleData()\r\n                )\r\n        );\r\n    }\r\n\r\n    @Override\r\n    @SuppressWarnings(\"unchecked\")\r\n    public <E extends IBufferObject> ISyncedNetworkPromise<E> getSyncedNetworkObject(SyncedObjectType<E> type, String queryParameters) {\r\n        NodeSyncedNetworkPromise<E> promise = new NodeSyncedNetworkPromise<>();\r\n        switch (type.getId()) {\r\n            case 0x00:\r\n                ICloudPlayerManager pm = this.providerRegistry.getUnchecked(ICloudPlayerManager.class);\r\n\r\n                //check if uuid or name provided\r\n                if (Validation.UNIQUEID.matches(queryParameters)) {\r\n                    UUID uniqueId = UUID.fromString(queryParameters);\r\n                    promise.setObject((E) pm.getCloudPlayerByUniqueIdOrNull(uniqueId));\r\n                } else {\r\n                    promise.setObject((E) pm.getCloudPlayerByNameOrNull(queryParameters));\r\n                }\r\n                break;\r\n            case 0x01:\r\n                ICloudServiceManager sm = this.providerRegistry.getUnchecked(ICloudServiceManager.class);\r\n\r\n                //check if uuid or name provided\r\n                if (Validation.UNIQUEID.matches(queryParameters)) {\r\n                    UUID uniqueId = UUID.fromString(queryParameters); // TODO: 06.09.2022\r\n                    promise.setObject((E) sm.getService(queryParameters));\r\n                } else {\r\n                    promise.setObject((E) sm.getService(queryParameters));\r\n                }\r\n                break;\r\n\r\n            case 0x02:\r\n                ICloudServiceTaskManager tm = this.providerRegistry.getUnchecked(ICloudServiceTaskManager.class);\r\n                promise.setObject((E) tm.getTaskOrNull(queryParameters));\r\n                break;\r\n\r\n            case 0x03:\r\n                ICloudServiceTaskManager tm1 = this.providerRegistry.getUnchecked(ICloudServiceTaskManager.class);\r\n                promise.setObject((E) tm1.getTaskGroupOrNull(queryParameters));\r\n                break;\r\n\r\n            case 0x04:\r\n                INodeManager nm = this.providerRegistry.getUnchecked(INodeManager.class);\r\n                promise.setObject((E) nm.getNodeByNameOrNull(queryParameters));\r\n                break;\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    @Override\r\n    public @NotNull <E extends IBufferObject> Task<ISyncedNetworkPromise<E>> getSyncedNetworkObjectAsync(SyncedObjectType<E> type, String queryParameters) {\r\n        return Task.callAsync(() -> getSyncedNetworkObject(type, queryParameters));\r\n    }\r\n\r\n    @Override\r\n    public void shutdown() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n\r\n        INodeManager nodeManager = providerRegistry.getUnchecked(INodeManager.class);\r\n\r\n        // TODO: 03.05.2022  migrating of head node\r\n        if (nodeManager.isHeadNode() && nodeManager.getAllCachedNodes().size() > 1) {\r\n            this.logger.warn(\"§eThis Node is the §cHeadNode §eright now and it's not possible for HeadNodes to shutdown because the migration of SubNodes to HeadNodes is not finished yet!\");\r\n            this.logger.warn(\"Make sure to shutdown every other Node first and then shutdown this Node!\");\r\n            return;\r\n        }\r\n\r\n        this.running = false;\r\n        this.providerRegistry.getUnchecked(ICommandManager.class).setActive(false);\r\n\r\n\r\n        this.logger.info(\"§7Trying to terminate the §cCloudsystem§8...\");\r\n        PlayerExecutor.forAll().disconnect(\"§cThe network was shut down!\");\r\n\r\n        Task.runTaskLater(() -> {\r\n\r\n\r\n            //shutting down servers\r\n            for (ICloudServer service : new ArrayList<>(this.providerRegistry.getUnchecked(ICloudServiceManager.class).getAllCachedServices())) {\r\n                IProcessCloudServer cloudServer = ((IProcessCloudServer) service);\r\n                Process process = cloudServer.getProcess();\r\n                if (process != null) {\r\n                    process.destroyForcibly();\r\n\r\n                }\r\n            }\r\n\r\n            IModuleManager moduleManager = providerRegistry.getUnchecked(IModuleManager.class);\r\n\r\n            moduleManager.disableModules();\r\n            moduleManager.unregisterModules();\r\n\r\n            this.webServer.shutdown();\r\n\r\n            logger.info(\"Terminating in §8[§c3§8]\");\r\n            Task.runTaskLater(() -> logger.info(\"Terminating in §8[§c2§8]\"), TimeUnit.SECONDS, 1);\r\n            Task.runTaskLater(() -> logger.info(\"Terminating in §8[§c1§8]\"), TimeUnit.SECONDS, 2);\r\n\r\n            //Shutting down networking and database\r\n            Task.multiTasking(this.networkExecutor.shutdown(), this.providerRegistry.getUnchecked(IDatabaseManager.class).shutdown()).registerListener(wrapper -> {\r\n                Task.runTaskLater(() -> {\r\n                    FileUtils.delete(NodeDriver.SERVICE_DIR_DYNAMIC.toPath());\r\n                    FileUtils.delete(NodeDriver.STORAGE_TEMP_FOLDER.toPath());\r\n\r\n                    logger.info(\"§aSuccessfully exited the CloudSystem§8!\");\r\n                    System.exit(0);\r\n                }, TimeUnit.SECONDS, 3);\r\n            });\r\n        }, TimeUnit.SECONDS, 1);\r\n    }\r\n\r\n    public String getBaseUrl() {\r\n        VersionInfo newestVersion = VersionInfo.getNewestVersion();\r\n\r\n        String urlString = \"https://github.com/Lystx/CookieCloudCloud/releases/download/v{version}\";\r\n        urlString = urlString.replace(\"{version}\", String.valueOf(newestVersion.getVersion()));\r\n        urlString = urlString.replace(\"{type}\", String.valueOf(newestVersion.getType()));\r\n\r\n        return urlString;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java b/cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java
--- a/cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/NodeDriver.java	(date 1668456075433)
@@ -456,8 +456,8 @@
                 this.logger.info("§8");
                 this.logger.info("§8");
                 this.logger.info("§8");
-                this.logger.info("This Node has successfully booted up and is now ready for personal use!");
-                this.logger.info("=> Thanks for using CookieCloudCloud [Version: " + VersionInfo.getCurrentVersion() + "]");
+                this.logger.info("This Node has successfully booted up and is now ready for use!");
+                this.logger.info("=> Thanks for using CookieCloud [Version: " + VersionInfo.getCurrentVersion() + "]");
                 this.logger.info("§8");
                 this.logger.info("§8");
                 this.logger.info("§8");
@@ -710,7 +710,7 @@
 
                 //check if uuid or name provided
                 if (Validation.UNIQUEID.matches(queryParameters)) {
-                    UUID uniqueId = UUID.fromString(queryParameters); // TODO: 06.09.2022
+                    UUID uniqueId = UUID.fromString(queryParameters);
                     promise.setObject((E) sm.getService(queryParameters));
                 } else {
                     promise.setObject((E) sm.getService(queryParameters));
@@ -749,7 +749,6 @@
 
         INodeManager nodeManager = providerRegistry.getUnchecked(INodeManager.class);
 
-        // TODO: 03.05.2022  migrating of head node
         if (nodeManager.isHeadNode() && nodeManager.getAllCachedNodes().size() > 1) {
             this.logger.warn("§eThis Node is the §cHeadNode §eright now and it's not possible for HeadNodes to shutdown because the migration of SubNodes to HeadNodes is not finished yet!");
             this.logger.warn("Make sure to shutdown every other Node first and then shutdown this Node!");
@@ -803,7 +802,7 @@
     public String getBaseUrl() {
         VersionInfo newestVersion = VersionInfo.getNewestVersion();
 
-        String urlString = "https://github.com/Lystx/CookieCloudCloud/releases/download/v{version}";
+        String urlString = "https://github.com/CookieMC337/CookieCloud/releases/download/v{version}";
         urlString = urlString.replace("{version}", String.valueOf(newestVersion.getVersion()));
         urlString = urlString.replace("{type}", String.valueOf(newestVersion.getType()));
 
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1668456312507)
+++ b/.idea/codeStyles/Project.xml	(date 1668456312507)
@@ -0,0 +1,13 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <JetCodeStyleSettings>
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </JetCodeStyleSettings>
+    <ScalaCodeStyleSettings>
+      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
+    </ScalaCodeStyleSettings>
+    <codeStyleSettings language="kotlin">
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </codeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1668456256007)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1668456256007)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node.service.helper;\r\n\r\nimport de.cookiemc.driver.CloudDriver;\r\n\r\n\r\nimport de.cookiemc.driver.node.INode;\r\nimport de.cookiemc.driver.node.INodeManager;\r\nimport de.cookiemc.driver.services.ICloudServer;\r\nimport de.cookiemc.driver.services.ICloudServiceManager;\r\nimport de.cookiemc.driver.services.impl.UniversalCloudServer;\r\nimport de.cookiemc.driver.services.task.ICloudServiceTaskManager;\r\nimport de.cookiemc.driver.services.task.IServiceTask;\r\nimport de.cookiemc.driver.services.utils.ServiceState;\r\nimport de.cookiemc.node.NodeDriver;\r\nimport de.cookiemc.node.config.MainConfiguration;\r\nimport lombok.Getter;\r\n\r\nimport java.net.InetSocketAddress;\r\nimport java.net.ServerSocket;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Comparator;\r\n\r\n@Getter\r\npublic class NodeServiceQueue {\r\n\r\n    private final int maxBootableServices;\r\n\r\n\r\n    private final Collection<String> pausedGroups;\r\n\r\n    public NodeServiceQueue() {\r\n        this.maxBootableServices = NodeDriver.getInstance().getNode().getConfig().getMaxBootableServicesAtSameTime();\r\n        this.pausedGroups = new ArrayList<>();\r\n\r\n        this.dequeue();\r\n    }\r\n\r\n    public void dequeue() {\r\n        // TODO: 30.08.2022 make all methods for remote-node that sends method execution to head node\r\n        if (!NodeDriver.getInstance().isRunning()) {\r\n            return;\r\n        }\r\n\r\n        if (!CloudDriver.getInstance().getProviderRegistry().getUnchecked(INodeManager.class).isHeadNode()) {\r\n            return; //if not head node not permitted to start servers\r\n        }\r\n\r\n        this.queue();\r\n\r\n        if (this.minBootableServiceExists()) {\r\n            return;\r\n        }\r\n\r\n        CloudDriver\r\n                .getInstance()\r\n                .getProviderRegistry()\r\n                .getUnchecked(ICloudServiceManager.class)\r\n                .getAllCachedServices()\r\n                .stream()\r\n                .filter(ser -> ser.getServiceState() == ServiceState.PREPARED)\r\n                .findFirst()\r\n                .ifPresent(cloudServer -> {\r\n                    cloudServer\r\n                            .getTask()\r\n                            .findAnyNodeAsync()\r\n                            .onTaskFailed(error -> {\r\n                                CloudDriver.getInstance().getLogger().error(\"Tried to start {} but the Node(s) {} for Servers of Configuration {} is not connected!\", cloudServer.getName(), cloudServer.getTask().getPossibleNodes(), cloudServer.getTask().getName());\r\n                            })\r\n                            .onTaskSucess(node -> {\r\n                                if (!node.hasEnoughMemoryToStart(cloudServer)) {\r\n                                    CloudDriver.getInstance().getLogger().warn(\"'{}' couldn't start {} because its maximum memory of {} has been reached!\", node.getName(), cloudServer.getName(), node.getConfig().getMemory());\r\n                                    return;\r\n                                }\r\n                                node.startServer(cloudServer);\r\n                            });\r\n                });\r\n\r\n    }\r\n\r\n    private void queue() {\r\n        CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceTaskManager.class).getAllCachedTasks().stream()\r\n                .filter(con -> this.getAmountOfGroupServices(con) < con.getMinOnlineService())\r\n                .filter(con -> !pausedGroups.contains(con.getName()))\r\n                .sorted(Comparator.comparingInt(IServiceTask::getStartOrder))\r\n                .forEach(task -> {\r\n\r\n                    INode node = task.findAnyNode();\r\n\r\n                    if (node == null) {\r\n                        CloudDriver.getInstance().getLogger().info(\"Tried to start a Service of Group '\" + task.getName() + \"' but no Node(s) with name '\" + task.getPossibleNodes() + \"' is connected!\");\r\n                        return;\r\n                    }\r\n\r\n\r\n                    int port = task.getVersion().isProxy() ? MainConfiguration.getInstance().getProxyStartPort() : MainConfiguration.getInstance().getSpigotStartPort();\r\n                    while (isPortUsed(port)) {\r\n                        port++;\r\n                    }\r\n\r\n                    ICloudServer service = new UniversalCloudServer(task.getName(), this.getPossibleServiceIDByGroup(task), port, node.getConfig().getAddress().getHost());\r\n                    service.setRunningNodeName(node.getName());\r\n                    CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).registerService(service);\r\n\r\n                });\r\n    }\r\n\r\n    private boolean minBootableServiceExists() {\r\n        return this.getAmountOfBootableServices() >= maxBootableServices;\r\n    }\r\n\r\n    private int getAmountOfBootableServices() {\r\n        return CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).getAllServicesByState(ServiceState.STARTING).size();\r\n    }\r\n\r\n    public int getAmountOfGroupServices(IServiceTask serviceGroup) {\r\n        return (int) CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).getAllCachedServices().stream()\r\n                .filter(it -> it.getTask().equals(serviceGroup)).count();\r\n    }\r\n\r\n    private int getPossibleServiceIDByGroup(IServiceTask serviceGroup) {\r\n        int id = 1;\r\n        while (this.isServiceIDAlreadyExists(serviceGroup, id)) id++;\r\n        return id;\r\n    }\r\n\r\n    private boolean isServiceIDAlreadyExists(IServiceTask serviceGroup, int id) {\r\n        return CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).getAllServicesByTask(serviceGroup).stream().anyMatch(it -> id == it.getServiceID());\r\n    }\r\n\r\n    private boolean isPortUsed(int port) {\r\n        for (ICloudServer service : CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).getAllCachedServices()) {\r\n            if (service.getTask().getPossibleNodes().equals(NodeDriver.getInstance().getNetworkExecutor().getNodeName())) {\r\n                if (service.getPort() == port) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        try (ServerSocket serverSocket = new ServerSocket()) {\r\n            serverSocket.bind(new InetSocketAddress(port));\r\n            return false;\r\n        } catch (Exception exception) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java b/cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java
--- a/cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/service/helper/NodeServiceQueue.java	(date 1668455409780)
@@ -37,7 +37,6 @@
     }
 
     public void dequeue() {
-        // TODO: 30.08.2022 make all methods for remote-node that sends method execution to head node
         if (!NodeDriver.getInstance().isRunning()) {
             return;
         }
Index: cloud-node/target/classes/node.sc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n#if enabled \"Lystx\" has all permisisons\r\nvar de.cookiemc.launcher.devmode = false\r\n\r\nif ($de.cookiemc.launcher.devmode$) -> {\r\n    print \"DevMode is activated!\"\r\n} else -> {\r\n    print \"DevMode is not activated!\"\r\n}\r\n\r\n#first including repos because dependencies need a valid repo\r\nrun includeRepositories();\r\n\r\n#then including dependencies\r\nrun includeDependencies();\r\n\r\n\r\n#Including repositories\r\nTask includeRepositories() -> {\r\n    repo ossrh https://oss.sonatype.org/content/repositories/snapshots\r\n    repo mvn https://repo1.maven.org/maven2\r\n\r\n} : Void\r\n\r\n#Including dependencies\r\nTask includeDependencies() -> {\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency me.tongfei progressbar 0.5.5\r\n    dependency mysql mysql-connector-java 8.0.27\r\n    dependency org.mongodb mongodb-driver-core 4.2.0-beta1\r\n    dependency org.mongodb mongodb-driver-sync 4.2.0-beta1\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency org.zeroturnaround zt-exec 1.12\r\n    dependency dnsjava dnsjava 3.4.0\r\n    dependency commons-io commons-io 2.11.0\r\n    dependency org.reflections reflections 0.10.2\r\n    dependency com.google.code.gson gson 2.8.9\r\n    dependency com.google.guava guava 31.0.1-jre\r\n    dependency io.netty netty-all 4.1.72.Final\r\n    dependency io.netty netty-transport 4.1.72.Final\r\n    dependency io.netty netty-transport-classes-epoll 4.1.72.Final\r\n    dependency io.netty netty-codec 4.1.72.Final\r\n    dependency org.jline jline 3.20.0\r\n\r\n} : Void\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/target/classes/node.sc b/cloud-node/target/classes/node.sc
--- a/cloud-node/target/classes/node.sc	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/target/classes/node.sc	(date 1668458951908)
@@ -1,6 +1,6 @@
 
 
-#if enabled "Lystx" has all permisisons
+#if enabled "CookieMC337" has all permisisons
 var de.cookiemc.launcher.devmode = false
 
 if ($de.cookiemc.launcher.devmode$) -> {
Index: cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node.console.jline3;\r\n\r\nimport de.cookiemc.common.VersionInfo;\r\nimport de.cookiemc.common.logging.LogLevel;\r\nimport de.cookiemc.common.logging.Logger;\r\nimport de.cookiemc.common.logging.formatter.ColoredMessageFormatter;\r\nimport de.cookiemc.common.logging.formatter.SpacePadder;\r\nimport de.cookiemc.common.logging.handler.LogEntry;\r\nimport de.cookiemc.common.misc.CollectionUtils;\r\nimport de.cookiemc.common.misc.ReflectionUtils;\r\nimport de.cookiemc.driver.CloudDriver;\r\nimport de.cookiemc.driver.commands.ICommandManager;\r\nimport de.cookiemc.driver.commands.context.CommandContext;\r\nimport de.cookiemc.driver.commands.data.Command;\r\nimport de.cookiemc.driver.commands.data.DriverCommand;\r\nimport de.cookiemc.driver.commands.parameter.CommandArguments;\r\nimport de.cookiemc.driver.console.Console;\r\nimport de.cookiemc.driver.console.screen.Screen;\r\nimport de.cookiemc.driver.console.screen.ScreenManager;\r\nimport de.cookiemc.node.NodeDriver;\r\nimport de.cookiemc.node.console.ColorTranslator;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.fusesource.jansi.Ansi;\r\nimport org.fusesource.jansi.AnsiConsole;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jline.reader.History;\r\nimport org.jline.reader.LineReader;\r\nimport org.jline.reader.impl.LineReaderImpl;\r\nimport org.jline.reader.impl.history.DefaultHistory;\r\nimport org.jline.terminal.Terminal;\r\nimport org.jline.terminal.TerminalBuilder;\r\nimport org.jline.utils.InfoCmp;\r\n\r\nimport javax.annotation.Nonnull;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.*;\r\nimport java.util.function.Consumer;\r\nimport java.util.stream.Collectors;\r\n\r\n@Getter\r\n@Setter\r\npublic class JLine3Console implements Console, Consumer<String> {\r\n\r\n    private final ConsoleReadThread consoleReadThread = new ConsoleReadThread(this);\r\n    private final Collection<Consumer<? super String>> inputHandlers = new ArrayList<>();\r\n    private final List<String> allWroteLines = new ArrayList<>();\r\n\r\n    private final Terminal terminal;\r\n    private final LineReaderImpl lineReader;\r\n\r\n    private final String promptTemplate;\r\n    private String prompt;\r\n    private String screenName = \"Console\";\r\n\r\n    public JLine3Console(String promptTemplate) throws Exception {\r\n        System.setProperty(\"library.jansi.version\", \"CookieCloudCloud\");\r\n        this.promptTemplate = promptTemplate;\r\n        this.prompt = promptTemplate;\r\n\r\n        //installing ansi\r\n        AnsiConsole.systemInstall();\r\n\r\n        //adding input handler for screen\r\n        this.addInputHandler(this);\r\n\r\n        this.terminal = TerminalBuilder.builder().system(true).encoding(StandardCharsets.UTF_8).build();\r\n        this.lineReader = new CustomLineReader(terminal, \"HC-Console\");\r\n\r\n        //copied from CloudNet Console part\r\n        this.lineReader.setAutosuggestion(LineReader.SuggestionType.COMPLETER);\r\n        this.lineReader.setCompleter(new JLine3Completer());\r\n\r\n        //copied from CloudNet Console part\r\n        this.lineReader.option(LineReader.Option.AUTO_GROUP, false);\r\n        this.lineReader.option(LineReader.Option.AUTO_MENU_LIST, true);\r\n        this.lineReader.option(LineReader.Option.AUTO_FRESH_LINE, true);\r\n        this.lineReader.option(LineReader.Option.EMPTY_WORD_OPTIONS, false);\r\n        this.lineReader.option(LineReader.Option.HISTORY_TIMESTAMPED, false);\r\n        this.lineReader.option(LineReader.Option.DISABLE_EVENT_EXPANSION, true);\r\n\r\n        //copied from CloudNet Console part\r\n        this.lineReader.variable(LineReader.BELL_STYLE, \"none\");\r\n        this.lineReader.variable(LineReader.HISTORY_SIZE, 500);\r\n        this.lineReader.variable(LineReader.HISTORY_FILE_SIZE, 2500);\r\n        this.lineReader.variable(LineReader.COMPLETION_STYLE_LIST_BACKGROUND, \"inverse\");\r\n\r\n        this.updatePrompt();\r\n        consoleReadThread.start();\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void setCommandInputValue(@Nonnull String commandInputValue) {\r\n        lineReader.getBuffer().write(commandInputValue);\r\n    }\r\n\r\n\r\n    @Override\r\n    public String readLineOrNull() {\r\n        return consoleReadThread.readLineOrNull();\r\n    }\r\n\r\n\r\n    @NotNull\r\n    @Override\r\n    public Console writeLine(@NotNull String text) {\r\n        if (!text.endsWith(System.lineSeparator()) && !text.startsWith(\"\\r\")) {\r\n            text += System.lineSeparator();\r\n        }\r\n        ScreenManager sm = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ScreenManager.class);\r\n        Screen console = sm.getScreenByNameOrNull(\"console\");\r\n        if (console != null) {\r\n            console.cacheLine(text);\r\n        }\r\n        if (sm.isScreenActive(\"console\")) {\r\n            forceWrite(text);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @Override\r\n    public Console writeEntry(@NotNull LogEntry entry) {\r\n        String formatted = ColoredMessageFormatter.format(entry);\r\n\r\n        if (!formatted.endsWith(System.lineSeparator()) && !entry.getMessage().startsWith(\"\\r\")) {\r\n            formatted += System.lineSeparator();\r\n        }\r\n        if (entry.getMessage().startsWith(\"\\r\")) {\r\n            formatted = \"\\r\" + formatted;\r\n        }\r\n        ScreenManager sm = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ScreenManager.class);\r\n        Screen console = sm.getScreenByNameOrNull(\"Console\");\r\n        if (console != null) {\r\n            console.cacheLine(entry.getMessage());\r\n        }\r\n        if (sm.isScreenActive(\"console\")) {\r\n            forceWrite(formatted);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @Override\r\n    public Console forceWrite(String text) {\r\n        if (!text.endsWith(System.lineSeparator()) && !text.startsWith(\"\\r\")) {\r\n            text += System.lineSeparator();\r\n        }\r\n        if (text.startsWith(\"\\r\")) {\r\n            print(text);\r\n            return this;\r\n        }\r\n        print(Ansi.ansi().eraseLine(Ansi.Erase.ALL).toString() + '\\r' + text + Ansi.ansi().reset().toString());\r\n        return this;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Console writePlain(String text) {\r\n        print(text);\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void resetPrompt() {\r\n        prompt = promptTemplate;\r\n        updatePrompt();\r\n    }\r\n\r\n    @Override\r\n    public void setCommandHistory(List<String> history) {\r\n        DefaultHistory entries = new DefaultHistory();\r\n        for (String s : history) {\r\n            entries.add(s);\r\n        }\r\n        lineReader.setHistory(entries);\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> getCommandHistory() {\r\n        Collection<String> history = new ArrayList<>();\r\n\r\n        for (History.Entry entry : lineReader.getHistory()) {\r\n            history.add(entry.line());\r\n        }\r\n\r\n        return history;\r\n    }\r\n\r\n    @Override\r\n    public void clearScreen() {\r\n        ReflectionUtils.clearConsole();\r\n        this.redisplay();\r\n    }\r\n\r\n    @Override\r\n    public void close() throws Exception {\r\n        consoleReadThread.interrupt();\r\n\r\n        terminal.flush();\r\n        terminal.close();\r\n\r\n        AnsiConsole.systemUninstall();\r\n    }\r\n\r\n    @Nonnull\r\n    @Override\r\n    public String getPrompt() {\r\n        return prompt;\r\n    }\r\n\r\n    @Override\r\n    public void setPrompt(@Nonnull String prompt) {\r\n        this.prompt = prompt;\r\n        updatePrompt();\r\n    }\r\n\r\n    @Override\r\n    public void setScreenName(@Nonnull String screenName) {\r\n        this.screenName = screenName;\r\n        resetPrompt();\r\n    }\r\n\r\n    @Override\r\n    public void addInputHandler(@Nonnull Consumer<? super String> handler) {\r\n        inputHandlers.add(handler);\r\n    }\r\n\r\n    @Nonnull\r\n    @Override\r\n    public Collection<Consumer<? super String>> getInputHandlers() {\r\n        return new ArrayList<>(inputHandlers);\r\n    }\r\n\r\n    @Override\r\n    public void printHeader() {\r\n\r\n        Logger logger = Logger.constantInstance();\r\n\r\n        logger.info(\"CookieCloudCloud in its current State of Development is presented to you by Lystx and Contributors...\");\r\n\r\n        logger.log(LogLevel.NULL, \"§b                       _                    §f___ _                 _ \");\r\n        logger.log(LogLevel.NULL, \"§b           /\\\\  /\\\\_   _| |_ ___  _ __ __ _  §f/ __\\\\ | ___  _   _  __| |\");\r\n        logger.log(LogLevel.NULL, \"§b          / /_/ / | | | __/ _ \\\\| '__/ _` |§f/ /  | |/ _ \\\\| | | |/ _` |\");\r\n        logger.log(LogLevel.NULL, \"§b         / __  /| |_| | || (_) | | | (_| §f/ /___| | (_) | |_| | (_| |\");\r\n        logger.log(LogLevel.NULL, \"§b         \\\\/ /_/  \\\\__, |\\\\__\\\\___/|_|  §f\\\\__,_\\\\____/|_|\\\\___/ \\\\__,_|\\\\__,_|\");\r\n        logger.log(LogLevel.NULL, \"§b                 |___/                  §f                            \");\r\n        logger.log(LogLevel.NULL, \"            §8x §eSmurf V1 §8- §fWhere opportunity connects §8x\");\r\n        logger.log(LogLevel.NULL, \" \");\r\n        logger.log(LogLevel.NULL, \"           §8=>    §fCloud Version \" + VersionInfo.getCurrentVersion());\r\n        logger.log(LogLevel.NULL, \"           §8=>    §fJava Version \" + System.getProperty(\"java.version\"));\r\n        logger.log(LogLevel.NULL, \"           §8=>    §fDiscord \" + \"https://discord.com/invite/WRYH33X7Fu\");\r\n        logger.log(LogLevel.NULL, \"\");\r\n        logger.info(\"§8\");\r\n    }\r\n\r\n    private void updatePrompt() {\r\n        prompt = ColorTranslator.translate(prompt)\r\n                .replace(\"%node%\", NodeDriver.getInstance() == null ? \"Node\" : (NodeDriver.getInstance().getNode() == null ? \"Node\" : NodeDriver.getInstance().getNode().getName()))\r\n                .replace(\"%screen%\", screenName);\r\n        lineReader.setPrompt(prompt);\r\n    }\r\n\r\n    private void print(@Nonnull String text) {\r\n        // print out the raw given line\r\n        this.lineReader.getTerminal().puts(InfoCmp.Capability.carriage_return);\r\n        this.lineReader.getTerminal().puts(InfoCmp.Capability.clr_eol);\r\n        this.lineReader.getTerminal().writer().print(text);\r\n        this.lineReader.getTerminal().writer().flush();\r\n\r\n        // re-displays the prompt to ensure everything is lined up\r\n        this.redisplay();\r\n    }\r\n\r\n    private void redisplay() {\r\n        if (!lineReader.isReading()) {\r\n            return;\r\n        }\r\n\r\n        lineReader.callWidget(LineReader.REDRAW_LINE);\r\n        lineReader.callWidget(LineReader.REDISPLAY);\r\n    }\r\n\r\n    @Nonnull\r\n    public LineReader getLineReader() {\r\n        return lineReader;\r\n    }\r\n\r\n    @Override\r\n    public void accept(String s) {\r\n        ScreenManager sm = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ScreenManager.class);\r\n        if (sm.isCurrentlyInScreen()) {\r\n            Screen screen = sm.getCurrentScreen();\r\n            if (screen == null) {\r\n                return;\r\n            }\r\n            for (Consumer<? super String> handler : new ArrayList<>(screen.getInputHandlers())) {\r\n                handler.accept(s);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Command(label = \"help\", aliases = {\"?\"}, usage = \"[page]\")\r\n    public void helpCommand(CommandContext<?> context, CommandArguments args) {\r\n\r\n        Integer page = args.getInt(0, 1);\r\n\r\n\r\n        Collection<String> duplicates = new ArrayList<>();\r\n        List<DriverCommand> commands = new ArrayList<>();\r\n\r\n        for (DriverCommand command : CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICommandManager.class).getRootCommands().stream().sorted(Comparator.comparing(DriverCommand::getPath)).collect(Collectors.toList())) {\r\n            if (!command.getCommandScope().covers(context.getCommandSender())) {\r\n                continue;\r\n            }\r\n            if (duplicates.stream().anyMatch(s -> command.getNames().contains(s))) { //to avoid aliases create conflicts\r\n                continue;\r\n            }\r\n            duplicates.addAll(command.getNames());\r\n            commands.add(command);\r\n\r\n        }\r\n\r\n        //split command help after 5 command entries\r\n        List<List<DriverCommand>> splitCommands = CollectionUtils.splitCollection(commands, 5);\r\n        try {\r\n            List<DriverCommand> pagedCommands = splitCommands.get((page - 1));\r\n\r\n            context.sendMessage(\"§8\");\r\n            context.sendMessage(\"§6=> CommandHelp Page §8[§b{}§8/§b{}§8]§8:\", page, splitCommands.size());\r\n            context.sendMessage(\"§8\");\r\n            for (DriverCommand command : pagedCommands) {\r\n\r\n                StringBuilder builder = new StringBuilder();\r\n\r\n                int triggerLength = 22;\r\n                int permissionLength = 25;\r\n                int descriptionLength = 25;\r\n\r\n                String triggers = command.getNames().toString();\r\n                String permission = (command.getPermission() == null || command.getPermission().trim().isEmpty()) ? \"None\" : command.getPermission();\r\n                String description = (!command.getDescription().trim().isEmpty() ? command.getDescription() : \"No Desc\");\r\n\r\n\r\n                if (triggers.length() > triggerLength) triggers = triggers.substring(triggers.length() - triggerLength);\r\n                if (permission.length() > permissionLength) permission = permission.substring(permission.length() - permissionLength);\r\n                if (description.length() > descriptionLength) description = description.substring(description.length() - descriptionLength);\r\n\r\n                //command triggers\r\n                builder.append(\"  §8» §7Trigger§8: §b\");\r\n                SpacePadder.padRight(builder, triggers, triggerLength);\r\n                builder.append(\" \");\r\n\r\n                //command permission\r\n                builder.append(\"§8| §7Perm§8: §b\");\r\n                SpacePadder.padRight(builder, permission, permissionLength);\r\n                builder.append(\" \");\r\n\r\n                //command description\r\n                builder.append(\"§8| §f\");\r\n                SpacePadder.padRight(builder, description, descriptionLength);\r\n\r\n                context.sendMessage(builder.toString());\r\n            }\r\n\r\n            context.sendMessage(\"§8\");\r\n            if (page < splitCommands.size()) {\r\n                context.sendMessage(\"§a=> §7Next Page§8: §ehelp {}\", (page + 1));\r\n            } else {\r\n                context.sendMessage(\"§c=> §7Previous Page§8: §ehelp {}\", (page - 1));\r\n            }\r\n            context.sendMessage(\"§8\");\r\n        } catch (Exception e) {\r\n            context.sendMessage(\"§cThere is no page with index §e\" + page + \"§c!\");\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java b/cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java
--- a/cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/console/jline3/JLine3Console.java	(date 1668453974577)
@@ -54,7 +54,7 @@
     private String screenName = "Console";
 
     public JLine3Console(String promptTemplate) throws Exception {
-        System.setProperty("library.jansi.version", "CookieCloudCloud");
+        System.setProperty("library.jansi.version", "CookieCloud");
         this.promptTemplate = promptTemplate;
         this.prompt = promptTemplate;
 
@@ -239,16 +239,16 @@
 
         Logger logger = Logger.constantInstance();
 
-        logger.info("CookieCloudCloud in its current State of Development is presented to you by Lystx and Contributors...");
-
-        logger.log(LogLevel.NULL, "§b                       _                    §f___ _                 _ ");
-        logger.log(LogLevel.NULL, "§b           /\\  /\\_   _| |_ ___  _ __ __ _  §f/ __\\ | ___  _   _  __| |");
-        logger.log(LogLevel.NULL, "§b          / /_/ / | | | __/ _ \\| '__/ _` |§f/ /  | |/ _ \\| | | |/ _` |");
-        logger.log(LogLevel.NULL, "§b         / __  /| |_| | || (_) | | | (_| §f/ /___| | (_) | |_| | (_| |");
-        logger.log(LogLevel.NULL, "§b         \\/ /_/  \\__, |\\__\\___/|_|  §f\\__,_\\____/|_|\\___/ \\__,_|\\__,_|");
-        logger.log(LogLevel.NULL, "§b                 |___/                  §f                            ");
-        logger.log(LogLevel.NULL, "            §8x §eSmurf V1 §8- §fWhere opportunity connects §8x");
+        logger.info("CookieCloud in its current State of Development is presented to you by CookieMC337");
+        logger.log(LogLevel.NULL, "§b _____             _    _      _____ _                 _ ");
+        logger.log(LogLevel.NULL, "§b/  __ \\           | |  (_)    /  __ \\ |               | |");
+        logger.log(LogLevel.NULL, "§b| /  \\/ ___   ___ | | ___  ___| /  \\/ | ___  _   _  __| |");
+        logger.log(LogLevel.NULL, "§b| |    / _ \\ / _ \\| |/ / |/ _ \\ |   | |/ _ \\| | | |/ _` |");
+        logger.log(LogLevel.NULL, "§b| \\__/\\ (_) | (_) |   <| |  __/ \\__/\\ | (_) | |_| | (_| |");
+        logger.log(LogLevel.NULL, "§b \\____/\\___/ \\___/|_|\\_\\_|\\___|\\____/_|\\___/ \\__,_|\\__,_|");
         logger.log(LogLevel.NULL, " ");
+        logger.log(LogLevel.NULL, " ");
+        logger.log(LogLevel.NULL, "           §bThis is a §e§lBETA §bVersion of CookieCloud");
         logger.log(LogLevel.NULL, "           §8=>    §fCloud Version " + VersionInfo.getCurrentVersion());
         logger.log(LogLevel.NULL, "           §8=>    §fJava Version " + System.getProperty("java.version"));
         logger.log(LogLevel.NULL, "           §8=>    §fDiscord " + "https://discord.com/invite/WRYH33X7Fu");
@@ -264,13 +264,10 @@
     }
 
     private void print(@Nonnull String text) {
-        // print out the raw given line
         this.lineReader.getTerminal().puts(InfoCmp.Capability.carriage_return);
         this.lineReader.getTerminal().puts(InfoCmp.Capability.clr_eol);
         this.lineReader.getTerminal().writer().print(text);
         this.lineReader.getTerminal().writer().flush();
-
-        // re-displays the prompt to ensure everything is lined up
         this.redisplay();
     }
 
Index: .idea/scala_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/scala_settings.xml b/.idea/scala_settings.xml
new file mode 100644
--- /dev/null	(date 1668456312554)
+++ b/.idea/scala_settings.xml	(date 1668456312554)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ScalaProjectSettings">
+    <option name="scala3DisclaimerShown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.discordbot.bot.service.command.impl;\r\n\r\nimport de.cookiemc.common.misc.StringCreator;\r\nimport de.cookiemc.document.Document;\r\nimport de.cookiemc.driver.commands.context.CommandContext;\r\nimport de.cookiemc.driver.commands.data.Command;\r\nimport de.cookiemc.driver.commands.parameter.CommandArguments;\r\nimport jdk.nashorn.api.scripting.URLReader;\r\nimport net.dv8tion.jda.api.EmbedBuilder;\r\nimport net.dv8tion.jda.api.entities.Member;\r\nimport net.dv8tion.jda.api.entities.channel.concrete.TextChannel;\r\nimport net.dv8tion.jda.api.entities.emoji.Emoji;\r\nimport net.dv8tion.jda.api.utils.messages.MessageCreateData;\r\n\r\nimport java.awt.*;\r\nimport java.io.BufferedReader;\r\nimport java.net.URL;\r\n\r\npublic class MemeCommand {\r\n\r\n    public static Document CURRENT_SUB_REDDIT = Document.newJsonDocument();\r\n\r\n    @Command(\r\n            label = \"meme\",\r\n            aliases = {\"memes\"},\r\n            desc = \"Shows you a random meme!\"\r\n    )\r\n    public void execute(DiscordCommandContext ctx, CommandArguments args) {\r\n\r\n        TextChannel channel = ctx.getTextChannel();\r\n        Member executor = ctx.getCommandSender().getExecutor();\r\n\r\n\r\n        String subReddit = args.getString(0, \"\");\r\n\r\n        try {\r\n\r\n            StringCreator stringCreator = new StringCreator();\r\n            BufferedReader bufferedReader = new BufferedReader(new URLReader(new URL(\"http://meme-api.herokuapp.com/gimme/\" + subReddit)));\r\n            String line;\r\n            while ((line = bufferedReader.readLine()) != null) {\r\n                stringCreator.append(line);\r\n            }\r\n\r\n            Document jsonObject = Document.newJsonDocument(stringCreator.toString());\r\n            CURRENT_SUB_REDDIT = jsonObject;\r\n            if (jsonObject.getBoolean(\"nsfw\") && !channel.isNSFW()) {\r\n                channel.sendMessage(\r\n                        MessageCreateData.fromEmbeds(\r\n                                new EmbedBuilder()\r\n                                        .setTitle(\"Memes | Failed\")\r\n                                        .setDescription(\"This channel is not a NSFW-Channel\\nSuch pictures can't be shown here\\nToggle NSFW-Option for this channel!\")\r\n                                        .setImage(\"https://support.discord.com/hc/article_attachments/360007795191/2_.jpg\")\r\n                                        .setFooter(\"Executor | \" + executor.getUser().getAsTag(), executor.getUser().getEffectiveAvatarUrl())\r\n                                        .build()\r\n                        )\r\n                ).queue();\r\n                return;\r\n            }\r\n            EmbedBuilder embedBuilder = new EmbedBuilder()\r\n                    .setColor(Color.ORANGE)\r\n                    .setImage(jsonObject.getString(\"url\"))\r\n                    .setTitle(jsonObject.getString(\"title\"))\r\n                    .setFooter(\"Subreddit | \" + jsonObject.getString(\"subreddit\"), executor.getUser().getEffectiveAvatarUrl());\r\n\r\n            channel.sendMessage(MessageCreateData.fromEmbeds(embedBuilder.build())).queue(message -> {\r\n                message.addReaction(Emoji.fromFormatted(\"⬆️\")).queue();\r\n                message.addReaction(Emoji.fromFormatted(\"⬇️\")).queue();\r\n                message.addReaction(Emoji.fromUnicode(\"\\uD83D\\uDD01\")).queue();\r\n            });\r\n        } catch (Exception e) {\r\n            channel.sendMessage(\r\n                    MessageCreateData.fromEmbeds(\r\n\r\n                            new EmbedBuilder()\r\n                                    .setTitle(\"Memes | Error\")\r\n                                    .setColor(Color.RED)\r\n                                    .setThumbnail(\"http://www.stochasticgeometry.ie/wp-content/uploads/2010/03/RedditProhibited.png\")\r\n                                    .setDescription(\"Couldn't get a meme from Reddit!\")\r\n                                    .setFooter(\"Executor | \" + executor.getUser().getAsTag(), executor.getUser().getEffectiveAvatarUrl())\r\n                                    .build()\r\n                    )\r\n            ).queue();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java b/cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java
--- a/cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-discordbot/src/main/java/de/cookiemc/discordbot/bot/service/command/impl/MemeCommand.java	(date 1668452674332)
@@ -36,7 +36,7 @@
         try {
 
             StringCreator stringCreator = new StringCreator();
-            BufferedReader bufferedReader = new BufferedReader(new URLReader(new URL("http://meme-api.herokuapp.com/gimme/" + subReddit)));
+            BufferedReader bufferedReader = new BufferedReader(new URLReader(new URL("https://meme-api.herokuapp.com/gimme/" + subReddit)));
             String line;
             while ((line = bufferedReader.readLine()) != null) {
                 stringCreator.append(line);
Index: cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node.module;\r\n\r\nimport de.cookiemc.common.DriverUtility;\r\nimport de.cookiemc.common.VersionInfo;\r\nimport de.cookiemc.common.logging.ConsoleColor;\r\nimport de.cookiemc.common.logging.Logger;\r\nimport de.cookiemc.common.misc.FileUtils;\r\nimport de.cookiemc.common.progressbar.ProgressBar;\r\nimport de.cookiemc.common.progressbar.ProgressBarStyle;\r\nimport de.cookiemc.common.task.Task;\r\nimport de.cookiemc.document.Document;\r\nimport de.cookiemc.document.DocumentFactory;\r\nimport de.cookiemc.document.IEntry;\r\nimport de.cookiemc.driver.CloudDriver;\r\nimport de.cookiemc.driver.console.Console;\r\nimport de.cookiemc.driver.module.IModuleManager;\r\nimport de.cookiemc.node.NodeDriver;\r\nimport de.cookiemc.node.module.updater.ModuleInfo;\r\nimport lombok.SneakyThrows;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.jar.JarEntry;\r\nimport java.util.jar.JarFile;\r\n\r\npublic class ModuleDownloader {\r\n\r\n    private final String applicationFileURL = \"https://raw.githubusercontent.com/Lystx/CookieCloudCloud/master/application.json\";\r\n    private Collection<ModuleInfo> cachedModules;\r\n\r\n\r\n    @SneakyThrows\r\n    public Collection<ModuleInfo> loadProvidedModules() {\r\n        if (cachedModules != null) {\r\n            return cachedModules;\r\n        }\r\n        Collection<ModuleInfo> modules = new ArrayList<>();\r\n\r\n        Document document = Document.newJsonDocumentByURL(applicationFileURL);\r\n        for (IEntry entry : document.getBundle(\"modules\")) {\r\n            Document doc = entry.toDocument();\r\n            if (!doc.has(\"name\") || !doc.has(\"url\") || !doc.has(\"version\")) {\r\n                Logger.constantInstance().error(\"Couldn't find attributes for ModuleInfo 'name' or 'url' or 'version' in following document:\");\r\n                Logger.constantInstance().error(doc.asRawJsonString());\r\n                continue;\r\n            }\r\n            ModuleInfo moduleInfo = new ModuleInfo(\r\n                    doc.get(\"name\").toString(),\r\n                    doc.get(\"url\").toString(),\r\n                    VersionInfo.fromString(doc.get(\"version\").toString())\r\n            );\r\n            Logger.constantInstance().debug(\"Loaded ModuleInfo[name={}, url={}, version={}]\", moduleInfo.getName(), moduleInfo.getUrl(), moduleInfo.getVersion());\r\n            modules.add(moduleInfo);\r\n        }\r\n        return (cachedModules = modules);\r\n    }\r\n\r\n    public String getModuleUrl(ModuleInfo info) {\r\n        VersionInfo currentVersion = info.getVersion();\r\n        String url = info.getUrl();\r\n\r\n        //replace url place holders\r\n        url = url.replace(\"{cloud.baseUrl}\", NodeDriver.getInstance().getBaseUrl());\r\n        url = url.replace(\"{module.name}\", info.getName());\r\n        url = url.replace(\"{module.version}\", currentVersion.toString());\r\n\r\n        return url;\r\n    }\r\n\r\n    public Task<ModuleInfo> updateModule(ModuleInfo module) {\r\n        Task<ModuleInfo> task = Task.empty();\r\n        return Task.callAsync(() -> {\r\n\r\n            String url = module.getUrl();\r\n            String name = module.getName();\r\n            VersionInfo currentVersion = module.getVersion();\r\n\r\n            //replace url place holders\r\n            url = url.replace(\"{cloud.baseUrl}\", NodeDriver.getInstance().getBaseUrl());\r\n            url = url.replace(\"{module.name}\", name);\r\n            url = url.replace(\"{module.version}\", currentVersion.toString());\r\n\r\n            ModuleInfo localModule = findCurrentModule(name, url);\r\n            if (localModule == null || module.getVersion().isNewerAs(localModule.getVersion())) {\r\n                Logger.constantInstance().info(\"Module[val={}] is either not existing or needs to be updated to Version[val={}, url={}]\", module.getName(), module.getVersion(), url);\r\n                downloadModule(module, url)\r\n                        .onTaskSucess(e -> task.setResult(module))\r\n                        .onTaskFailed(task::setFailure);\r\n            } else {\r\n                Logger.constantInstance().info(\"Module[name={}, ver={}] is up to date\", module.getName(), module.getVersion());\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n\r\n    public Task<ModuleInfo> updateModule(String name) {\r\n\r\n        Collection<ModuleInfo> modules = loadProvidedModules();\r\n        ModuleInfo moduleInfo = modules.stream().filter(m -> m.getName().equalsIgnoreCase(name)).findFirst().orElse(null);\r\n        return moduleInfo == null ? Task.empty() : updateModule(moduleInfo);\r\n    }\r\n\r\n    public Task<Integer> updateModules() {\r\n        Task<Integer> task = Task.empty();\r\n        Collection<ModuleInfo> modules = loadProvidedModules();\r\n\r\n        AtomicInteger updateCount = new AtomicInteger(0);\r\n        for (ModuleInfo module : modules) {\r\n            this.updateModule(module)\r\n                    .onTaskSucess(m -> {\r\n                        updateCount.set((updateCount.get() + 1));\r\n                        if (updateCount.get() >= modules.size()) {\r\n                            task.setResult(updateCount.get());\r\n                        }\r\n                    })\r\n                    .onTaskFailed(task::setFailure);\r\n        }\r\n        return task;\r\n    }\r\n\r\n    public Task<Path> downloadModule(ModuleInfo module, String url) {\r\n        Task<Path> task = Task.empty();\r\n        ProgressBar pb = new ProgressBar(ProgressBarStyle.COLORED_UNICODE_BLOCK, 100L);\r\n\r\n        //manage console\r\n        Console console = NodeDriver.getInstance().getConsole();\r\n        String prompt = console.getPrompt();\r\n        console.setPrompt(\"\");\r\n\r\n        pb.setFakePercentage(50, 100);\r\n        pb.setTaskName(\"§8» §bDownloading §f\" + module.getName());\r\n        pb.setPrintAutomatically(true);\r\n        pb.setExpandingAnimation(true);\r\n\r\n        pb.setPrinter(progress -> {\r\n            NodeDriver.getInstance().getConsole().writePlain(ConsoleColor.toColoredString('§', progress));\r\n        });\r\n\r\n        DriverUtility.downloadVersion(url, CloudDriver.getInstance().getProviderRegistry().getUnchecked(IModuleManager.class).getModulesDirectory().resolve(module.getName() + \"-\" + module.getVersion() + \".jar\"), pb)\r\n                .onTaskSucess(v -> {\r\n                    task.setResult(v);\r\n                    console.setPrompt(prompt);\r\n                })\r\n                .onTaskFailed(e -> {\r\n                    task.setFailure(e);\r\n                    Logger.constantInstance().error(\"Couldn't download Module[val={}, url={}] Error: {}\", module.getName(), url, e);\r\n                    console.setPrompt(prompt);\r\n                });\r\n\r\n        return task;\r\n    }\r\n\r\n    private ModuleInfo findCurrentModule(String name, String url) {\r\n        Path moduleFile = FileUtils.list(CloudDriver.getInstance().getProviderRegistry().getUnchecked(IModuleManager.class).getModulesDirectory())\r\n                .filter(path -> path.getFileName().toString().endsWith(\".jar\"))\r\n                .filter(path -> path.getFileName().toString().contains(name))\r\n                .findFirst()\r\n                .orElse(null);\r\n        if (moduleFile == null) {\r\n            return null;\r\n        }\r\n        Document document = loadDocument(moduleFile.toFile(), \"config.json\");\r\n\r\n        return document == null ? null\r\n                : new ModuleInfo(\r\n                name,\r\n                url,\r\n                VersionInfo.fromString(document.getString(\"version\"))\r\n        );\r\n    }\r\n\r\n\r\n    private String loadJson(File jarFile, String filename) {\r\n        try {\r\n            JarFile jf = new JarFile(jarFile);\r\n            JarEntry je = jf.getJarEntry(filename);\r\n            try (BufferedReader br = new BufferedReader(new InputStreamReader(jf.getInputStream(je)))) {\r\n                StringBuilder builder = new StringBuilder();\r\n                String line;\r\n                while ((line = br.readLine()) != null) {\r\n                    builder.append(line);\r\n                }\r\n                jf.close();\r\n                br.close();\r\n                return builder.toString();\r\n            } catch (Exception e) {\r\n                return null;\r\n            }\r\n        } catch (IOException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private Document loadDocument(File jarFile, String filename) {\r\n        String jsonInput = this.loadJson(jarFile, filename);\r\n        if (jsonInput == null) {\r\n            return null;\r\n        }\r\n        return DocumentFactory.newJsonDocument(jsonInput);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java b/cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java
--- a/cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/module/ModuleDownloader.java	(date 1668454532655)
@@ -31,7 +31,7 @@
 
 public class ModuleDownloader {
 
-    private final String applicationFileURL = "https://raw.githubusercontent.com/Lystx/CookieCloudCloud/master/application.json";
+    private final String applicationFileURL = "https://raw.githubusercontent.com/CookieMC337/CookieCloud/master/application.json";
     private Collection<ModuleInfo> cachedModules;
 
 
Index: cloud-discordbot/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <parent>\r\n        <artifactId>cloudsystem</artifactId>\r\n        <groupId>de.cookiemc</groupId>\r\n        <version>1.0-SNAPSHOT</version>\r\n    </parent>\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <artifactId>cloud-discordbot</artifactId>\r\n\r\n    <dependencies>\r\n\r\n        <dependency>\r\n            <groupId>de.cookiemc</groupId>\r\n            <artifactId>cloud-commons</artifactId>\r\n            <version>1.0-SNAPSHOT</version>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>de.cookiemc</groupId>\r\n            <artifactId>cloud-remote</artifactId>\r\n            <version>1.0-SNAPSHOT</version>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.dv8tion</groupId>\r\n            <artifactId>JDA</artifactId>\r\n            <version>5.0.0-alpha.22</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n\r\n    <properties>\r\n        <maven.compiler.source>8</maven.compiler.source>\r\n        <maven.compiler.target>8</maven.compiler.target>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-discordbot/pom.xml b/cloud-discordbot/pom.xml
--- a/cloud-discordbot/pom.xml	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-discordbot/pom.xml	(date 1668452649301)
@@ -30,6 +30,13 @@
             <artifactId>JDA</artifactId>
             <version>5.0.0-alpha.22</version>
         </dependency>
+        <dependency>
+            <groupId>com.xenoamess</groupId>
+            <artifactId>nashorn</artifactId>
+            <version>jdk8u265-b01-x2</version>
+        </dependency>
+        <!-- Thanks for using https://jar-download.com -->
+
     </dependencies>
 
 
Index: cloud-launcher/src/main/resources/launcher.cloud
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n/*\r\nThis is the CookieCloudCloud launcher config.\r\nUse '#' to make a comment\r\n*/\r\n\r\n#if enabled \"Lystx\" has all permisisons\r\nvar de.cookiemc.launcher.devmode = false\r\n\r\nvar de.cookiemc.launcher.autoupdater = true\r\nvar de.cookiemc.launcher.module.autoupdater = true\r\nvar de.cookiemc.launcher.application.file = https://raw.githubusercontent.com/Lystx/CookieCloudCloud/master/application.json\r\nvar de.cookiemc.launcher.updater.baseUrl = https://github.com/Lystx/CookieCloudCloud/releases/download/v{version}\r\nvar de.cookiemc.launcher.updater.url = {cloud.baseUrl}/CookieCloudCloud-{type}-{version}.zip\r\nvar de.cookiemc.launcher.customVersion = null\r\n\r\n\r\nif ($de.cookiemc.launcher.devmode$) -> {\r\n    log INFO \"DevMode is activated!\"\r\n} else -> {\r\n    log INFO \"DevMode is not activated!\"\r\n}\r\n\r\nrun includeRepositories();\r\nrun includeDependencies();\r\n\r\n\r\n#Including repositories\r\nTask includeRepositories() -> {\r\n    log INFO \"Including Repositories\"\r\n    repo ossrh https://oss.sonatype.org/content/repositories/snapshots\r\n    repo mvn https://repo1.maven.org/maven2\r\n\r\n} : Void\r\n\r\n#Including dependencies\r\nTask includeDependencies() -> {\r\n\r\n    log INFO \"Including Dependencies!\"\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency me.tongfei progressbar 0.5.5\r\n    dependency mysql mysql-connector-java 8.0.27\r\n    dependency org.mongodb mongodb-driver-core 4.2.0-beta1\r\n    dependency org.mongodb mongodb-driver-sync 4.2.0-beta1\r\n    dependency org.fusesource.jansi jansi 2.4.0\r\n    dependency org.zeroturnaround zt-exec 1.12\r\n    dependency dnsjava dnsjava 3.4.0\r\n    dependency commons-io commons-io 2.11.0\r\n    dependency org.reflections reflections 0.10.2\r\n    dependency com.google.code.gson gson 2.8.9\r\n    dependency com.google.guava guava 31.0.1-jre\r\n    dependency io.netty netty-all 4.1.72.Final\r\n    dependency io.netty netty-transport 4.1.72.Final\r\n    dependency io.netty netty-transport-classes-epoll 4.1.72.Final\r\n    dependency io.netty netty-codec 4.1.72.Final\r\n    dependency org.jline jline 3.20.0\r\n\r\n} : Void\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-launcher/src/main/resources/launcher.cloud b/cloud-launcher/src/main/resources/launcher.cloud
--- a/cloud-launcher/src/main/resources/launcher.cloud	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-launcher/src/main/resources/launcher.cloud	(date 1668457436147)
@@ -4,7 +4,7 @@
 Use '#' to make a comment
 */
 
-#if enabled "Lystx" has all permisisons
+#if enabled "CookieMC337" has all permisisons
 var de.cookiemc.launcher.devmode = false
 
 var de.cookiemc.launcher.autoupdater = true
Index: cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node.commands.impl;\r\n\r\nimport de.cookiemc.driver.CloudDriver;\r\nimport de.cookiemc.driver.commands.context.CommandContext;\r\nimport de.cookiemc.driver.commands.data.Command;\r\nimport de.cookiemc.driver.commands.data.enums.CommandScope;\r\nimport de.cookiemc.driver.commands.help.CommandHelp;\r\nimport de.cookiemc.driver.commands.help.CommandHelper;\r\nimport de.cookiemc.driver.commands.parameter.CommandArguments;\r\nimport de.cookiemc.driver.commands.tabcomplete.TabCompleter;\r\nimport de.cookiemc.driver.commands.tabcomplete.TabCompletion;\r\nimport de.cookiemc.driver.networking.protocol.packets.defaults.DriverUpdatePacket;\r\nimport de.cookiemc.driver.services.ICloudServiceManager;\r\nimport de.cookiemc.driver.services.task.ICloudServiceTaskManager;\r\nimport de.cookiemc.driver.services.task.IServiceTask;\r\nimport de.cookiemc.driver.services.task.bundle.DefaultTaskGroup;\r\nimport de.cookiemc.driver.services.fallback.SimpleFallback;\r\nimport de.cookiemc.driver.services.task.UniversalServiceTask;\r\nimport de.cookiemc.driver.services.template.ITemplate;\r\nimport de.cookiemc.driver.services.template.ITemplateStorage;\r\nimport de.cookiemc.driver.services.template.def.CloudTemplate;\r\nimport de.cookiemc.driver.services.utils.ServiceShutdownBehaviour;\r\nimport de.cookiemc.driver.services.utils.version.ServiceVersion;\r\nimport de.cookiemc.driver.services.utils.SpecificDriverEnvironment;\r\nimport de.cookiemc.driver.setup.SetupControlState;\r\nimport de.cookiemc.node.NodeDriver;\r\nimport de.cookiemc.node.setup.TaskSetup;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.stream.Collectors;\r\n\r\n@Command(\r\n        label = \"task\",\r\n        aliases = {\"tasks\"},\r\n        desc = \"Manages all tasks\",\r\n        invalidUsageIfEmptyInput = true,\r\n        autoHelpAliases = {\"help\", \"?\"},\r\n        permission = \"cloud.command.task\",\r\n        scope = CommandScope.CONSOLE_AND_INGAME\r\n)\r\npublic class TaskCommand {\r\n\r\n    @CommandHelp\r\n    public void onArgumentHelp(CommandHelper helper) {\r\n        helper.performTemplateHelp();\r\n    }\r\n\r\n    @TabCompletion\r\n    public void onTabComplete(TabCompleter completer) {\r\n        completer.reactWithSubCommands(\"task\");\r\n    }\r\n\r\n\r\n    @Command(\r\n            label = \"info\",\r\n            parent = \"task\",\r\n            usage = \"<task>\",\r\n            desc = \"Gives info about a task\",\r\n            scope = CommandScope.CONSOLE_AND_INGAME\r\n    )\r\n    public void infoCommand(CommandContext<?> ctx, CommandArguments args) {\r\n\r\n        IServiceTask task = args.get(0, IServiceTask.class);\r\n        if (task == null) {\r\n            ctx.sendMessage(\"§cThis ServiceTask does not exists\");\r\n            return;\r\n        }\r\n\r\n        ctx.sendMessage(\"§8\");\r\n        ctx.sendMessage(\"§bInformation§8: \");\r\n        ctx.sendMessage(\"§bName: §f\" + task.getName());\r\n        ctx.sendMessage(\"§bTemplates: §f\" + task.getTaskGroup().getTemplates().stream().map(ITemplate::getPrefix).collect(Collectors.toList()));\r\n        ctx.sendMessage(\"§bNode: §f\" + task.getPossibleNodes());\r\n        ctx.sendMessage(\"§bMemory: §f\" + task.getMemory() + \"MB\");\r\n        ctx.sendMessage(\"§bStartOrder: §f\" + task.getStartOrder());\r\n        ctx.sendMessage(\"§bJava: §f\" + task.getJavaVersion());\r\n        ctx.sendMessage(\"§bPermission: §f\" + task.getPermission());\r\n        ctx.sendMessage(\"§bProperties: §f\" + task.getProperties().asRawJsonString());\r\n        ctx.sendMessage(\"§bMaintenance: §f\" + (task.isMaintenance() ? \"§aYes\" : \"§cNo\"));\r\n        ctx.sendMessage(\"§bMin online services: §f\" + task.getMinOnlineService());\r\n        ctx.sendMessage(\"§bServices: §f\" + task.getOnlineServices().size() + \"/\" + (task.getMaxOnlineService() == -1 ? \"XXX\" : String.valueOf(task.getMaxOnlineService())));\r\n        ctx.sendMessage(\"§bBehaviour: §f\" + task.getTaskGroup().getShutdownBehaviour());\r\n        ctx.sendMessage(\"§bVersion: §f\" + task.getVersion().getTitle());\r\n        ctx.sendMessage(\"§8\");\r\n    }\r\n\r\n    @Command(\r\n            label = \"create\",\r\n            parent = \"task\",\r\n            desc = \"Creates a task\",\r\n            scope = CommandScope.CONSOLE\r\n    )\r\n    public void createCommand(CommandContext<?> ctx, CommandArguments args) {\r\n\r\n        new TaskSetup(NodeDriver.getInstance().getConsole()).start((setup, state) -> {\r\n            if (state == SetupControlState.FINISHED) {\r\n                String name = setup.getName();\r\n                int memory = setup.getMemory();\r\n                int maxPlayers = setup.getMaxPlayers();\r\n                int maxServers = setup.getMaxServers();\r\n                boolean dynamic = setup.isDynamic();\r\n                ServiceVersion version = setup.getVersion();\r\n                int minServers = setup.getMinServers();\r\n                String node = setup.getNode();\r\n                String[] nodes = node.split(\",\");\r\n                boolean maintenance = setup.isMaintenance();\r\n                int javaVersion = setup.getJavaVersion();\r\n                String parentName = setup.getParentName();\r\n                String templateStorage = setup.getTemplateStorage();\r\n                ServiceShutdownBehaviour shutdownBehaviour = dynamic ? ServiceShutdownBehaviour.DELETE : ServiceShutdownBehaviour.KEEP;\r\n\r\n                UniversalServiceTask serviceTask = new UniversalServiceTask();\r\n\r\n                if (!CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceTaskManager.class).getTaskGroup(parentName).isPresent()) {\r\n                    DefaultTaskGroup parent = new DefaultTaskGroup(name, version.getEnvironment(), shutdownBehaviour, new String[]{\r\n                            \"-XX:+UseG1GC\",\r\n                            \"-XX:+ParallelRefProcEnabled\",\r\n                            \"-XX:MaxGCPauseMillis=200\",\r\n                            \"-XX:+UnlockExperimentalVMOptions\",\r\n                            \"-XX:+DisableExplicitGC\",\r\n                            \"-XX:+AlwaysPreTouch\",\r\n                            \"-XX:G1NewSizePercent=30\",\r\n                            \"-XX:G1MaxNewSizePercent=40\",\r\n                            \"-XX:G1HeapRegionSize=8M\",\r\n                            \"-XX:G1ReservePercent=20\",\r\n                            \"-XX:G1HeapWastePercent=5\",\r\n                            \"-XX:G1MixedGCCountTarget=4\",\r\n                            \"-XX:InitiatingHeapOccupancyPercent=15\",\r\n                            \"-XX:G1MixedGCLiveThresholdPercent=90\",\r\n                            \"-XX:G1RSetUpdatingPauseTimePercent=5\",\r\n                            \"-XX:SurvivorRatio=32\",\r\n                            \"-XX:+PerfDisableSharedMem\",\r\n                            \"-XX:MaxTenuringThreshold=1\",\r\n                            \"-Dusing.aikars.flags=https://mcflags.emc.gs\",\r\n                            \"-Daikars.new.flags=true\",\r\n                            \"-XX:-UseAdaptiveSizePolicy\",\r\n                            \"-XX:CompileThreshold=100\",\r\n                            \"-Dio.netty.recycler.maxCapacity=0\",\r\n                            \"-Dio.netty.recycler.maxCapacity.default=0\",\r\n                            \"-Djline.terminal=jline.UnsupportedTerminal\"\r\n                    }, new ArrayList<>(), Collections.singleton(new CloudTemplate(name, \"default\", templateStorage, true)));\r\n                    CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceTaskManager.class).registerTaskGroup(parent);\r\n                }\r\n\r\n                serviceTask.setName(name);\r\n                serviceTask.setMemory(memory);\r\n                serviceTask.setVersion(version);\r\n                serviceTask.setPossibleNodes(Arrays.asList(nodes));\r\n                serviceTask.setParent(parentName);\r\n                serviceTask.setMaintenance(maintenance);\r\n                serviceTask.setPermission(null);\r\n                serviceTask.setJavaVersion(javaVersion);\r\n                serviceTask.setMotd(\"Default CookieCloudCloud Service.\");\r\n\r\n                if (serviceTask.getTaskGroup().getEnvironment() == SpecificDriverEnvironment.PROXY) {\r\n                    serviceTask.setProperty(\"onlineMode\", true);\r\n                    serviceTask.setProperty(\"proxyProtocol\", false);\r\n                } else {\r\n                    serviceTask.setProperty(\"gameServer\", true);\r\n                }\r\n\r\n                SimpleFallback fallback = new SimpleFallback();\r\n                fallback.setEnabled(setup.isFallback());\r\n                if (setup.isFallback()) {\r\n                    fallback.setPermission(setup.getFallbackPermission().equalsIgnoreCase(\"none\") ? \"\" : setup.getFallbackPermission());\r\n                    fallback.setPriority(setup.getFallbackPriority());\r\n                } else {\r\n                    fallback.setPriority(1);\r\n                    fallback.setPermission(\"\");\r\n                }\r\n\r\n                serviceTask.setStartOrder(setup.getStartOrder());\r\n                serviceTask.setFallback(fallback);\r\n                serviceTask.setDefaultMaxPlayers(maxPlayers);\r\n                serviceTask.setMinOnlineService(minServers);\r\n                serviceTask.setMaxOnlineService(maxServers);\r\n\r\n                CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceTaskManager.class).registerTask(serviceTask);\r\n\r\n                //creating templates\r\n                for (ITemplate template : serviceTask.getTaskGroup().getTemplates()) {\r\n                    ITemplateStorage storage = template.getStorage();\r\n                    if (storage != null) {\r\n                        storage.createTemplate(template);\r\n                    }\r\n                }\r\n\r\n                ctx.sendMessage(\"§7The ServiceTask §b\" + name + \" §7was created§8!\");\r\n                NodeDriver.getInstance().getServiceQueue().dequeue();\r\n                DriverUpdatePacket.publishUpdate(CloudDriver.getInstance().getNetworkExecutor());\r\n\r\n            } else {\r\n                ctx.sendMessage(\"§cNo ServiceTask has been created!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    @Command(\r\n            label = \"delete\",\r\n            parent = \"task\",\r\n            usage = \"<task>\",\r\n            desc = \"Deletes a task\",\r\n            scope = CommandScope.CONSOLE_AND_INGAME\r\n    )\r\n    public void deleteCommand(CommandContext<?> ctx, CommandArguments args) {\r\n        IServiceTask task = args.get(0, IServiceTask.class);\r\n        if (task == null) {\r\n            ctx.sendMessage(\"§cThere is no existing ServiceTask with the name §e\" + args.get(0) + \"§c!\");\r\n            return;\r\n        }\r\n        CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceTaskManager.class).unregisterTask(task);\r\n        CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).getAllServicesByTask(task).forEach(ser -> CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceManager.class).shutdownService(ser));\r\n\r\n        ctx.sendMessage(\"§7The ServiceTask §b\" + task.getName() + \" §7was deleted§8!\");\r\n    }\r\n\r\n    @Command(\r\n            label = \"toggleMaintenance\",\r\n            parent = \"task\",\r\n            usage = \"<task>\",\r\n            desc = \"Toggles maintenance for a task\",\r\n            scope = CommandScope.CONSOLE_AND_INGAME\r\n    )\r\n    public void toggleMaintenanceTask(CommandContext<?> ctx, CommandArguments args) {\r\n        IServiceTask task = args.get(0, IServiceTask.class);\r\n        if (task == null) {\r\n            ctx.sendMessage(\"§cThere is no existing ServiceTask with the name §e\" + args.get(0) + \"§c!\");\r\n            return;\r\n        }\r\n        boolean maintenance = !task.isMaintenance();\r\n        task.setMaintenance(maintenance);\r\n        task.update();\r\n\r\n        ctx.sendMessage(\"§7The maintenance state of ServiceTask §b\" + task.getName() + \" §7is now \" + (maintenance ? \"§aEnabled\": \"§cDisabled\") + \"§8!\");\r\n    }\r\n\r\n    @Command(\r\n            label = \"list\",\r\n            parent = \"task\",\r\n            desc = \"Lists all tasks\",\r\n            scope = CommandScope.CONSOLE_AND_INGAME\r\n    )\r\n    public void listCommand(CommandContext<?> ctx, CommandArguments args) {\r\n        Collection<IServiceTask> cachedTasks = CloudDriver.getInstance().getProviderRegistry().getUnchecked(ICloudServiceTaskManager.class).getAllCachedTasks();\r\n        if (cachedTasks.isEmpty()) {\r\n            ctx.sendMessage(\"§cThere are no ServiceTasks cached at the moment!\");\r\n            return;\r\n        }\r\n        ctx.sendMessage(\"§8\");\r\n        for (IServiceTask g : cachedTasks) {\r\n            ctx.sendMessage(\"§8=> §b\" + g.getName() + \" §8(§b\" + (g.getVersion().isProxy() ? \"PROXY\" : \"MINECRAFT\") + \"§8)\");\r\n        }\r\n        ctx.sendMessage(\"§8\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java b/cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java
--- a/cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/commands/impl/TaskCommand.java	(date 1668453523274)
@@ -153,7 +153,7 @@
                 serviceTask.setMaintenance(maintenance);
                 serviceTask.setPermission(null);
                 serviceTask.setJavaVersion(javaVersion);
-                serviceTask.setMotd("Default CookieCloudCloud Service.");
+                serviceTask.setMotd("Default CookieCloud Service.");
 
                 if (serviceTask.getTaskGroup().getEnvironment() == SpecificDriverEnvironment.PROXY) {
                     serviceTask.setProperty("onlineMode", true);
Index: cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.bridge.bukkit.listener;\r\n\r\nimport de.cookiemc.bridge.IBridgePlugin;\r\nimport de.cookiemc.common.VersionInfo;\r\nimport de.cookiemc.driver.CloudDriver;\r\nimport de.cookiemc.driver.player.ICloudPlayer;\r\nimport de.cookiemc.driver.sync.SyncedObjectType;\r\nimport lombok.Data;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.event.EventHandler;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.event.player.AsyncPlayerChatEvent;\r\n\r\nimport java.text.SimpleDateFormat;\r\n\r\n/**\r\n * This listener listens for Chat-Input on Spigot-Side\r\n * and checks if the input matches any registered Cloud-Sided-Command\r\n *\r\n * @author Lystx\r\n * @since SNAPSHOT-1.3\r\n */\r\n@Data\r\npublic class BukkitPlayerCommandListener implements Listener {\r\n\r\n    /**\r\n     * The plugin bridge instance to handle command\r\n     */\r\n    private final IBridgePlugin bridge;\r\n\r\n    @EventHandler\r\n    public void handleChat(AsyncPlayerChatEvent event) {\r\n\r\n        Player player = event.getPlayer();\r\n        if (event.getMessage().equalsIgnoreCase(\"#CookieCloudCloud\") || event.getMessage().equalsIgnoreCase(\"#HC\")) {\r\n\r\n            CloudDriver\r\n                    .getInstance()\r\n                    .getSyncedNetworkObjectAsync(SyncedObjectType.PLAYER, player.getUniqueId().toString())\r\n                    .onTaskSucess(promise -> {\r\n\r\n                        ICloudPlayer cloudPlayer = promise.getSyncedObjectOrNull();\r\n                        player.sendMessage(\"§8§m-----------------------------\");\r\n                        player.sendMessage(\"§8» §7CookieCloudCloud by §bLystx §8[§e\" + VersionInfo.getCurrentVersion().toString() + \"§8]\");\r\n                        player.sendMessage(\"§8\");\r\n                        player.sendMessage(\"   §8» §7Proxy §8┃ §b\" + cloudPlayer.getProxyServer().getName());\r\n                        player.sendMessage(\"   §8» §7Server §8┃ §b\" + cloudPlayer.getServer().getName());\r\n                        player.sendMessage(\"   §8» §7First Login §8┃ §b\" + new SimpleDateFormat(\"dd.MM.yyyy - HH:mm:ss\").format(cloudPlayer.getFirstLogin()));\r\n                        player.sendMessage(\"§8§m-----------------------------\");\r\n                    });\r\n            event.setCancelled(true);\r\n        }\r\n\r\n        //message is no command!\r\n        if (!event.getMessage().startsWith(\"/\")) {\r\n            return;\r\n        }\r\n        bridge.handleCommandExecution(player.getUniqueId(), event.getMessage(), event::setCancelled);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java b/cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java
--- a/cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-bridge/src/main/java/de/cookiemc/bridge/bukkit/listener/BukkitPlayerCommandListener.java	(date 1668447384798)
@@ -32,7 +32,7 @@
     public void handleChat(AsyncPlayerChatEvent event) {
 
         Player player = event.getPlayer();
-        if (event.getMessage().equalsIgnoreCase("#CookieCloudCloud") || event.getMessage().equalsIgnoreCase("#HC")) {
+        if (event.getMessage().equalsIgnoreCase("/CookieCloud") || event.getMessage().equalsIgnoreCase("/cloud")) {
 
             CloudDriver
                     .getInstance()
@@ -41,7 +41,7 @@
 
                         ICloudPlayer cloudPlayer = promise.getSyncedObjectOrNull();
                         player.sendMessage("§8§m-----------------------------");
-                        player.sendMessage("§8» §7CookieCloudCloud by §bLystx §8[§e" + VersionInfo.getCurrentVersion().toString() + "§8]");
+                        player.sendMessage("§8» §7CookieCloud by §CookieMC337 §8[§e" + VersionInfo.getCurrentVersion().toString() + "§8]");
                         player.sendMessage("§8");
                         player.sendMessage("   §8» §7Proxy §8┃ §b" + cloudPlayer.getProxyServer().getName());
                         player.sendMessage("   §8» §7Server §8┃ §b" + cloudPlayer.getServer().getName());
Index: cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.cookiemc.node.bootstrap;\r\n\r\nimport de.cookiemc.IdentifiableClassLoader;\r\nimport de.cookiemc.common.function.ExceptionallyConsumer;\r\nimport de.cookiemc.common.misc.FileUtils;\r\nimport de.cookiemc.node.bootstrap.library.DependencyLoader;\r\nimport de.cookiemc.node.bootstrap.script.IncludeDependencyCommand;\r\nimport de.cookiemc.node.bootstrap.script.IncludeRepositoryCommand;\r\nimport de.cookiemc.node.bootstrap.library.Dependency;\r\nimport de.cookiemc.node.bootstrap.library.Repository;\r\nimport de.cookiemc.script.api.IScript;\r\nimport de.cookiemc.script.api.IScriptLoader;\r\nimport de.cookiemc.script.api.impl.DefaultScriptLoader;\r\nimport de.cookiemc.script.defaults.DefaultModifyCommand;\r\nimport de.cookiemc.script.defaults.DefaultPrintCommand;\r\nimport de.cookiemc.script.defaults.DefaultRunCommand;\r\nimport de.cookiemc.script.defaults.DefaultVarCommand;\r\n\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URISyntaxException;\r\nimport java.net.URL;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.*;\r\n\r\npublic class CloudBootstrap {\r\n\r\n    private static URL getCurrentURL() {\r\n\r\n        String s = CloudBootstrap.class.getName();\r\n        int i = s.lastIndexOf(\".\");\r\n        s = s.substring(i + 1);\r\n        s = s + \".class\";\r\n        return CloudBootstrap.class.getResource(s);\r\n    }\r\n\r\n    public static void main(String[] args) throws URISyntaxException, MalformedURLException {\r\n\r\n        Map<String, Repository> repositories = new HashMap<>();\r\n        List<Dependency> includedDependencies = new ArrayList<>();\r\n\r\n        IScriptLoader loader = new DefaultScriptLoader();\r\n\r\n        loader.registerCommand(new DefaultPrintCommand());\r\n        loader.registerCommand(new DefaultRunCommand());\r\n        loader.registerCommand(new DefaultVarCommand());\r\n        loader.registerCommand(new DefaultModifyCommand());\r\n        loader.registerCommand(new IncludeDependencyCommand(includedDependencies::add));\r\n        loader.registerCommand(new IncludeRepositoryCommand(r -> repositories.put(r.getName(), r)));\r\n\r\n        Path launcherFile = Paths.get(\"node.hc\");\r\n        if (!Files.exists(launcherFile)) {\r\n            try {\r\n                FileUtils.copy(\r\n                        ClassLoader.getSystemResourceAsStream(\"node.hc\"),\r\n                        Files.newOutputStream(launcherFile)\r\n                );\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n\r\n\r\n        IScript script = loader.loadScript(Paths.get(\"node.hc\"));\r\n        if (script == null) {\r\n            System.out.println(\"Couldn't load script!\");\r\n            return;\r\n        }\r\n        script.executeAsync()\r\n                .onTaskSucess((ExceptionallyConsumer<Void>) v -> {\r\n\r\n                    DependencyLoader dependencyLoader = new DependencyLoader(repositories, includedDependencies);\r\n\r\n                    Collection<URL> dependencyResources;\r\n                    try {\r\n                        dependencyResources = dependencyLoader.loadDependencyURLs();\r\n                        dependencyResources.add(getCurrentURL()); //adding current jar file\r\n                    } catch (IOException exception) {\r\n                        throw new RuntimeException(\"Unable to install needed dependencies!\", exception);\r\n                    }\r\n\r\n\r\n                    IdentifiableClassLoader classLoader = new IdentifiableClassLoader(dependencyResources.toArray(new URL[0]));\r\n\r\n                    Thread thread = new Thread(() -> {\r\n                        try {\r\n                            Method method = classLoader.loadClass(InternalBootstrap.class.getName()).getMethod(\"main\", String[].class);\r\n                            method.invoke(null, (Object) args);\r\n                        } catch (IllegalAccessException | InvocationTargetException | ClassNotFoundException | NoSuchMethodException exception) {\r\n                            exception.printStackTrace();\r\n                        }\r\n                    });\r\n\r\n                    try {\r\n                        Thread.currentThread().setContextClassLoader(classLoader);\r\n                        Field scl = ClassLoader.class.getDeclaredField(\"scl\"); // Get system class loader\r\n                        scl.setAccessible(true); // Set accessible\r\n                        scl.set(null, classLoader); // Update it to your class loader\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    thread.setPriority(Thread.MIN_PRIORITY);\r\n                    thread.setContextClassLoader(classLoader);\r\n                    thread.start();\r\n\r\n\r\n                });\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java b/cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java
--- a/cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java	(revision 775c4e4aad7ee81be0b89c5fdb257fd6fe5d33d6)
+++ b/cloud-node/src/main/java/de/cookiemc/node/bootstrap/CloudBootstrap.java	(date 1668453195780)
@@ -66,7 +66,7 @@
         }
 
 
-        IScript script = loader.loadScript(Paths.get("node.hc"));
+        IScript script = loader.loadScript(launcherFile);
         if (script == null) {
             System.out.println("Couldn't load script!");
             return;
